<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Laman的小站</title>
  
  <subtitle>练习时长一年的前端练习生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-06T13:48:05.759Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Laman</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试题合集③</title>
    <link href="http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A3/"/>
    <id>http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A3/</id>
    <published>2020-03-16T01:45:35.058Z</published>
    <updated>2019-11-06T13:48:05.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、对象数组如何去重"><a href="#1、对象数组如何去重" class="headerlink" title="1、对象数组如何去重"></a>1、对象数组如何去重</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> responseList = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">a</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">a</span>: <span class="number">4</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> result = responseList.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> ids = acc.map(<span class="function"><span class="params">item</span> =&gt;</span> item.id);</span><br><span class="line">    <span class="keyword">return</span> ids.includes(cur.id) ? acc : [...acc, cur];</span><br><span class="line">&#125;, []);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// -&gt; [ &#123; id: 1, a: 1&#125;, &#123;id: 2, a: 2&#125;, &#123;id: 3, a: 3&#125; ]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="2、手写实现Promise"><a href="#2、手写实现Promise" class="headerlink" title="2、手写实现Promise"></a>2、手写实现Promise</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myPromise</span>(<span class="params">constructor</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self=<span class="keyword">this</span>;</span><br><span class="line">    self.status=<span class="string">"pending"</span> <span class="comment">//定义状态改变前的初始状态</span></span><br><span class="line">    self.value=<span class="literal">undefined</span>;<span class="comment">//定义状态为resolved的时候的状态</span></span><br><span class="line">    self.reason=<span class="literal">undefined</span>;<span class="comment">//定义状态为rejected的时候的状态</span></span><br><span class="line">    self.onFullfilledArray=[];</span><br><span class="line">    self.onRejectedArray=[];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(self.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">          self.value=value;</span><br><span class="line">          self.status=<span class="string">"resolved"</span>;</span><br><span class="line">          self.onFullfilledArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">                f(self.value);</span><br><span class="line">                <span class="comment">//如果状态从pending变为resolved，</span></span><br><span class="line">                <span class="comment">//那么就遍历执行里面的异步方法</span></span><br><span class="line">          &#125;);</span><br><span class="line">        </span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(self.status===<span class="string">"pending"</span>)&#123;</span><br><span class="line">          self.reason=reason;</span><br><span class="line">          self.status=<span class="string">"rejected"</span>;</span><br><span class="line">          self.onRejectedArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">              f(self.reason);</span><br><span class="line">             <span class="comment">//如果状态从pending变为rejected， </span></span><br><span class="line">             <span class="comment">//那么就遍历执行里面的异步方法</span></span><br><span class="line">          &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//捕获构造异常</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">       <span class="keyword">constructor</span>(resolve,reject);</span><br><span class="line">    &#125;catch(e)&#123;</span><br><span class="line">       reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myPromise.prototype.then=<span class="function"><span class="keyword">function</span>(<span class="params">onFullfilled,onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self=<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> promise2;</span><br><span class="line">    <span class="keyword">switch</span>(self.status)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"pending"</span>:</span><br><span class="line">        promise2 = <span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">             self.onFullfilledArray.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                  <span class="keyword">try</span>&#123;</span><br><span class="line">                 <span class="keyword">let</span> temple=onFullfilled(self.value);</span><br><span class="line">                 resolvePromise(temple)</span><br><span class="line">                &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                   reject(e) <span class="comment">//error catch</span></span><br><span class="line">                &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;);</span><br><span class="line">             self.onRejectedArray.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   <span class="keyword">try</span>&#123;</span><br><span class="line">                   <span class="keyword">let</span> temple=onRejected(self.reason);</span><br><span class="line">                   resolvePromise(temple)</span><br><span class="line">                 &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                   reject(e)<span class="comment">// error catch</span></span><br><span class="line">               &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"resolved"</span>:</span><br><span class="line">        promise2=<span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">           setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> temple=onFullfilled(self.value);</span><br><span class="line">              <span class="comment">//将上次一then里面的方法传递进下一个Promise状态</span></span><br><span class="line">              resolvePromise(temple);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                  reject(e);<span class="comment">//error catch</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"rejected"</span>:</span><br><span class="line">        promise2=<span class="keyword">new</span> myPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">           setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             <span class="keyword">try</span>&#123;</span><br><span class="line">               <span class="keyword">let</span> temple=onRejected(self.reason);</span><br><span class="line">               <span class="comment">//将then里面的方法传递到下一个Promise的状态里</span></span><br><span class="line">               resolvePromise(temple);   </span><br><span class="line">             &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">               reject(e);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:       </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise,x,resolve,reject</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(promise===x)&#123;</span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"type error"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> isUsed;</span><br><span class="line">  <span class="keyword">if</span>(x!==<span class="literal">null</span>&amp;&amp;(<span class="keyword">typeof</span> x===<span class="string">"object"</span>||<span class="keyword">typeof</span> x===<span class="string">"function"</span>))&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> then=x.then;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> then===<span class="string">"function"</span>)&#123;</span><br><span class="line">           <span class="comment">//是一个promise的情况</span></span><br><span class="line">           then.call(x,<span class="function"><span class="keyword">function</span>(<span class="params">y</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">if</span>(isUsed)<span class="keyword">return</span>;</span><br><span class="line">              isUsed=<span class="literal">true</span>;</span><br><span class="line">              resolvePromise(promise,y,resolve,reject);</span><br><span class="line">           &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">if</span>(isUsed)<span class="keyword">return</span>;</span><br><span class="line">              isUsed=<span class="literal">true</span>;</span><br><span class="line">              reject(e);</span><br><span class="line">           &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">//仅仅是一个函数或者是对象</span></span><br><span class="line">           resolve(x)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">         <span class="keyword">if</span>(isUsed)<span class="keyword">return</span>;</span><br><span class="line">         isUsed=<span class="literal">true</span>;</span><br><span class="line">         reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//返回的基本类型，直接resolve</span></span><br><span class="line">    resolve(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3、你所知道的前端性能优化方案"><a href="#3、你所知道的前端性能优化方案" class="headerlink" title="3、你所知道的前端性能优化方案"></a>3、你所知道的前端性能优化方案</h1><p>(1) 减少DOM的访问次数，可以将DOM缓存到变量中；</p><p>(2) 减少<strong>重绘</strong>和<strong>回流</strong>，任何会导致重绘和回流的操作都应减少执行，可将多次操作合并为一次；</p><p>(3) 尽量采用<strong>事件委托</strong>的方式进行事件绑定，避免大量绑定导致内存占用过多；</p><p>(4) css层级尽量扁平化，避免过多的层级嵌套，尽量使用特定的选择器来区分；</p><p>(5) 动画尽量使用CSS3动画属性来实现，开启GPU硬件加速；</p><p>(6) 图片在加载前提前指定宽高或者脱离文档流，可避免加载后的重新计算导致的页面回流；</p><p>(7) css文件在<code>&lt;head&gt;</code>标签中引入，js文件在<code>&lt;body&gt;</code>标签中引入，优化关键渲染路径；</p><p>(8) 加速或者减少HTTP请求，使用<strong>CDN加载静态资源</strong>，合理使用浏览器强缓存和协商缓存，小图片可以使用Base64来代替;</p><p>(9) 压缩混淆代码，删除无用代码，代码拆分来减少文件体积；</p><p>(10) 小图片使用雪碧图，图片选择合适的质量、尺寸和格式，避免流量浪费。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、对象数组如何去重&quot;&gt;&lt;a href=&quot;#1、对象数组如何去重&quot; class=&quot;headerlink&quot; title=&quot;1、对象数组如何去重&quot;&gt;&lt;/a&gt;1、对象数组如何去重&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; responseList = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; result = responseList.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;acc, cur&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ids = acc.map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; item.id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ids.includes(cur.id) ? acc : [...acc, cur];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(result); &lt;span class=&quot;comment&quot;&gt;// -&amp;gt; [ &amp;#123; id: 1, a: 1&amp;#125;, &amp;#123;id: 2, a: 2&amp;#125;, &amp;#123;id: 3, a: 3&amp;#125; ]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>面试题合集③</title>
    <link href="http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A2/"/>
    <id>http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A2/</id>
    <published>2020-03-16T01:45:35.038Z</published>
    <updated>2019-10-23T02:19:24.019Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深浅拷贝的原理"><a href="#深浅拷贝的原理" class="headerlink" title="深浅拷贝的原理"></a>深浅拷贝的原理</h1><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><blockquote><p>赋值可以分为两个部分</p><ul><li>基本数据类型的赋值：赋值后两个变量互不影响</li><li>引用数据类型：两个变量具有相同的引用，指向的是同一个地址，因此相互影响</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">a = <span class="string">'change'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//change</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引用数据类型</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">  name: <span class="string">'laman'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    tel: <span class="number">123456</span>,</span><br><span class="line">    address: <span class="string">'beijing'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = obj1;</span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">'jack'</span>;</span><br><span class="line">obj1.info.tel = <span class="number">0000</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:'jack',</span></span><br><span class="line"><span class="comment">//   info:&#123;</span></span><br><span class="line"><span class="comment">//     tel:0000,</span></span><br><span class="line"><span class="comment">//     address:'beijing'</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:'jack',</span></span><br><span class="line"><span class="comment">//   info:&#123;</span></span><br><span class="line"><span class="comment">//     tel:0000,</span></span><br><span class="line"><span class="comment">//     address:'beijing'</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>然而实际情况是并不象 obj1 的变化影响到 obj2，所以这时候就需要浅拷贝和深拷贝</p></blockquote><a id="more"></a><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p></blockquote><p>简单来说可以理解为浅拷贝只解决了第一层的问题，拷贝第一层的基本类型值，以及第一层的引用类型地址。</p><h3 id="常用的几个浅拷贝"><a href="#常用的几个浅拷贝" class="headerlink" title="常用的几个浅拷贝"></a>常用的几个浅拷贝</h3><ul><li><code>object.assign()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'laman'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    tel: <span class="number">123456</span>,</span><br><span class="line">    address: <span class="string">'beijing'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">'jack'</span>;</span><br><span class="line">obj1.info.tel = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:'jack',</span></span><br><span class="line"><span class="comment">//   info:&#123;</span></span><br><span class="line"><span class="comment">//     tel:123,</span></span><br><span class="line"><span class="comment">//     address:'beijing'</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:'laman',</span></span><br><span class="line"><span class="comment">//   info:&#123;</span></span><br><span class="line"><span class="comment">//     tel:123,</span></span><br><span class="line"><span class="comment">//     address:'beijing'</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到，如果只是对<code>obj1</code>的最外层改变的话，是不会影响到<code>obj2</code>的，但是再深一层的修改，<code>obj2</code>就会跟着变化。因此这是一个浅拷贝</p></blockquote><ul><li><code>Spread</code>展开语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  name: <span class="string">'laman'</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    tel: <span class="number">123456</span>,</span><br><span class="line">    address: <span class="string">'beijing'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; ...obj1 &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"></span><br><span class="line">obj1.name = <span class="string">'jack'</span>;</span><br><span class="line">obj1.info.tel = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:'jack',</span></span><br><span class="line"><span class="comment">//   info:&#123;</span></span><br><span class="line"><span class="comment">//     tel:123,</span></span><br><span class="line"><span class="comment">//     address:'beijing'</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   name:'laman',</span></span><br><span class="line"><span class="comment">//   info:&#123;</span></span><br><span class="line"><span class="comment">//     tel:123,</span></span><br><span class="line"><span class="comment">//     address:'beijing'</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>效果跟<code>Object.assign()</code>是一样的</p></blockquote><ul><li><code>Array.prototype.slice()</code></li></ul><blockquote><p>数组克隆，返回一个新的原数组，但是深层也是浅拷贝</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>, <span class="string">'1'</span>, [<span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">let</span> b = a.slice(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">// ["1", [2, 3]]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>] = <span class="string">'99'</span>;</span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">// [0, "99", [4, 3]]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="comment">//  ["1", [4, 3]]</span></span><br></pre></td></tr></table></figure><p>可以看出，改变 <code>a[1]</code> 之后 <code>b[0]</code> 的值并没有发生变化，但改变 <code>a[2][0]</code> 之后，相应的 <code>b[1][0]</code> 的值也发生变化。说明 <code>slice()</code> 方法是浅拷贝，相应的还有<code>concat</code>等，在工作中面对复杂数组结构要额外注意</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。拷贝前后两个对象互不影响。</p></blockquote><ul><li><code>JSON.parse(JSON.stringify(obj))</code> 最简单的深拷贝方法</li></ul><blockquote><p><strong>注意事项</strong></p><ul><li>会忽略 <code>undefined</code>和 <code>symbol</code></li><li>不能正确处理<code>new Date()</code> ==&gt;转成时间戳可解决</li><li>不能处理正则</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">    name: &apos;muyiy&apos;,</span><br><span class="line">    a: undefined,</span><br><span class="line">    b: Symbol(&apos;muyiy&apos;),</span><br><span class="line">    c: function() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(obj);</span><br><span class="line">// &#123;</span><br><span class="line">// name: &quot;muyiy&quot;,</span><br><span class="line">// a: undefined,</span><br><span class="line">//  b: Symbol(muyiy),</span><br><span class="line">//  c: ƒ ()</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">let b = JSON.parse(JSON.stringify(obj));</span><br><span class="line">console.log(b);</span><br><span class="line">// &#123;name: &quot;muyiy&quot;&#125;</span><br></pre></td></tr></table></figure><ul><li>实现一个深拷贝方法<code>deepClone()</code><blockquote><p>思路很简单：对于简单类型，直接复制。对于引用类型，递归复制它的每一个属性。</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> copyed_objs = []; <span class="comment">//此数组解决了循环引用和相同引用的问题，它存放已经递归到的目标对象</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_deepCopy</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target !== <span class="string">'object'</span> || !target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copyed_objs.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (copyed_objs[i].target === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> copyed_objs[i].copyTarget;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(target)) &#123;</span><br><span class="line">      obj = []; <span class="comment">//处理target是数组的情况</span></span><br><span class="line">    &#125;</span><br><span class="line">    copyed_objs.push(&#123; <span class="attr">target</span>: target, <span class="attr">copyTarget</span>: obj &#125;);</span><br><span class="line">    <span class="built_in">Object</span>.keys(target).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (obj[key]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      obj[key] = _deepCopy(target[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _deepCopy(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>copyed_objs</strong> 这个数组存放的是已经递归过的目标对象。在递归一个目标对象之前，我们应该检查这个数组，如果当前目标对象和 <strong>copyed_objs</strong> 中的某个对象相等，那么不对其递归。</p></blockquote><blockquote><p>这样就解决了循环引用和相同引用的问题。</p></blockquote><p>——————————————————————————本文引用自木易杨前端进阶</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;深浅拷贝的原理&quot;&gt;&lt;a href=&quot;#深浅拷贝的原理&quot; class=&quot;headerlink&quot; title=&quot;深浅拷贝的原理&quot;&gt;&lt;/a&gt;深浅拷贝的原理&lt;/h1&gt;&lt;h3 id=&quot;赋值&quot;&gt;&lt;a href=&quot;#赋值&quot; class=&quot;headerlink&quot; title=&quot;赋值&quot;&gt;&lt;/a&gt;赋值&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;赋值可以分为两个部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本数据类型的赋值：赋值后两个变量互不影响&lt;/li&gt;
&lt;li&gt;引用数据类型：两个变量具有相同的引用，指向的是同一个地址，因此相互影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//基本数据类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;change&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a); &lt;span class=&quot;comment&quot;&gt;//change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b); &lt;span class=&quot;comment&quot;&gt;//a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//引用数据类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj1 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  name: &lt;span class=&quot;string&quot;&gt;&#39;laman&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  info: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tel: &lt;span class=&quot;number&quot;&gt;123456&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    address: &lt;span class=&quot;string&quot;&gt;&#39;beijing&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj2 = obj1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1.name = &lt;span class=&quot;string&quot;&gt;&#39;jack&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;obj1.info.tel = &lt;span class=&quot;number&quot;&gt;0000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   name:&#39;jack&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   info:&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     tel:0000,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     address:&#39;beijing&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   name:&#39;jack&#39;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   info:&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     tel:0000,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//     address:&#39;beijing&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//   &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;然而实际情况是并不象 obj1 的变化影响到 obj2，所以这时候就需要浅拷贝和深拷贝&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>二些面试题合集</title>
    <link href="http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A1/"/>
    <id>http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A1/</id>
    <published>2020-03-16T01:45:35.023Z</published>
    <updated>2019-10-21T11:12:05.977Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TCP的三次握手和四次挥手"><a href="#TCP的三次握手和四次挥手" class="headerlink" title="TCP的三次握手和四次挥手"></a>TCP的三次握手和四次挥手</h1><blockquote><p>TCP的特性</p></blockquote><ul><li>TCP 提供一种<strong>面向连接的、可靠的</strong>字节流服务</li><li>在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP</li><li>TCP使用校验，确认和重传机制来保证可靠传输</li><li>TCP给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复</li><li>TCP使用滑块窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制</li></ul><a id="more"></a><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><blockquote><p>是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。<br>三次握手的目的是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。在socket编程中，客户端执行<code>connect()</code>时。将触发三次握手。</p></blockquote><p> <img src="https://i.loli.net/2019/08/28/h7kgmVnt5R9XMYF.png" alt="20190828152438.png"></p><ul><li>第一次握手（SYN=1,seq=client_isn）</li></ul><blockquote><p>客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。<strong>发送完毕后，客户端进入SYN_SEND状态</strong></p></blockquote><ul><li>第二次握手（SYN=1，ACK=1，seq=server_isn,ACKnum=client_isn+1）</li></ul><blockquote><p>服务器发回确认包（ACK）应答，即SYN标志位和ACK标志位均为1.服务器端选择自己ISN序列号，放到seq域里，同时将确认序列号（Acknowledgement Number）设置为客户的ISN为1，即client_isn+1。<strong>发送完毕后，服务器进入SYN_RCVD状态</strong></p></blockquote><ul><li>第三次握手（ACK=1，ACKnum=server_isn+1，seq=lient_isn+1）</li></ul><blockquote><p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1。<strong>发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</strong></p></blockquote><h3 id="四次挥手，关闭连接"><a href="#四次挥手，关闭连接" class="headerlink" title="四次挥手，关闭连接"></a>四次挥手，关闭连接</h3><blockquote><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。<strong>TCP 的连接的拆除需要发送四个包，因此称为四次挥手。</strong> 客户端或服务器均可主动发起挥手动作，在socket编程中，任何一方执行close()操作即可产生挥手操作。</p></blockquote><p><img src="https://i.loli.net/2019/08/28/Deh389TEXICMmoH.png" alt="20190828154449.png"></p><ul><li><p>第一次挥手(FIN=1，seq=x)</p><blockquote><p>假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。发送完毕后，客户端进入 <code>FIN_WAIT_1</code> 状态。</p></blockquote></li><li><p>第二次挥手(ACK=1，ACKnum=x+1)</p></li></ul><blockquote><p>服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。</p></blockquote><blockquote><p>发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。</p></blockquote><ul><li>第三次挥手(FIN=1，seq=y)</li></ul><blockquote><p>服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。</p></blockquote><blockquote><p>发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。</p></blockquote><ul><li>第四次挥手(ACK=1，ACKnum=y+1)</li></ul><blockquote><p>客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。</p></blockquote><blockquote><p>服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。</p></blockquote><blockquote><p>客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。</p></blockquote><h1 id="vue-渲染大量数据时应该怎么优化？"><a href="#vue-渲染大量数据时应该怎么优化？" class="headerlink" title="vue 渲染大量数据时应该怎么优化？"></a>vue 渲染大量数据时应该怎么优化？</h1><p>1、按需加载局部数据, 虚拟列表，无限下拉刷新<br>2、大量纯展示的数据,不需要追踪变化的 用object.freeze冻结<br>3、增加加载动画提升用户体验</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP的三次握手和四次挥手&quot;&gt;&lt;a href=&quot;#TCP的三次握手和四次挥手&quot; class=&quot;headerlink&quot; title=&quot;TCP的三次握手和四次挥手&quot;&gt;&lt;/a&gt;TCP的三次握手和四次挥手&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;TCP的特性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TCP 提供一种&lt;strong&gt;面向连接的、可靠的&lt;/strong&gt;字节流服务&lt;/li&gt;
&lt;li&gt;在一个TCP连接中，仅有两方进行彼此通信。广播和多播不能用于TCP&lt;/li&gt;
&lt;li&gt;TCP使用校验，确认和重传机制来保证可靠传输&lt;/li&gt;
&lt;li&gt;TCP给数据分节进行排序，并使用累积确认保证数据的顺序不变和非重复&lt;/li&gt;
&lt;li&gt;TCP使用滑块窗口机制来实现流量控制，通过动态改变窗口的大小进行拥塞控制&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>一些面试题合集</title>
    <link href="http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A0/"/>
    <id>http://yoursite.com/2020/03/16/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%90%88%E9%9B%86%E2%91%A0/</id>
    <published>2020-03-16T01:45:35.005Z</published>
    <updated>2019-10-21T11:12:14.594Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分析比较opacity-0、display-none、visibility-hidden的优劣和适用场景。"><a href="#分析比较opacity-0、display-none、visibility-hidden的优劣和适用场景。" class="headerlink" title="分析比较opacity:0、display:none、visibility: hidden的优劣和适用场景。"></a>分析比较opacity:0、display:none、visibility: hidden的优劣和适用场景。</h1><ul><li>结构</li></ul><blockquote><ul><li><code>display:none</code>会让元素完全从渲染树消失，渲染的时候不占空间，不能点击</li></ul></blockquote><blockquote><ul><li><code>opacity:0</code>不会让元素从渲染树消失，占据空间可以点击，只是你看不见它</li><li><code>visibility:hidden</code>不会让元素从渲染树消失，占据空间可以点击，但是不能点击</li></ul></blockquote><ul><li>继承</li></ul><blockquote><ul><li><code>display:none</code>和<code>opacity:0</code>都是非继承属性，就是说子孙节点怎么改，只要父节点设置了隐藏，子孙节点都不会显示。子孙节点消失是因为渲染树消失造成<code>visibility:hidden</code>是继承属性，子孙节点消失是由于继承了<code>visibility:hidden</code>，只要子孙节点在自身设置<code>visibility:visible</code>就可以显示</li></ul></blockquote><a id="more"></a><ul><li>性能</li></ul><blockquote><ul><li><code>display:none</code>会造成文档回流，性能开销较大。<code>visibility:hidden</code>会造成重绘，比回流性能开销要小一些。<code>opacity:0</code>重建图层，不会触发重绘，性能高</li></ul></blockquote><h1 id="setTimeout、Promise、Async-Await-的区别"><a href="#setTimeout、Promise、Async-Await-的区别" class="headerlink" title="setTimeout、Promise、Async/Await 的区别"></a>setTimeout、Promise、Async/Await 的区别</h1><blockquote><p>这题主要是考察这三者在事件循环中的区别，事件循环中分为宏任务队列和微任务队列。<br>其中<code>setTimeout</code>的回调函数放到宏任务队列里，等到执行栈清空以后执行；<br><code>promise.then</code>里的回调函数会放到相应宏任务的微任务队列里，等宏任务里面的同步代码执行完再执行；<code>async</code>函数表示函数里面可能会有异步方法，<code>await</code>后面跟一个表达式，<code>async</code>方法执行时，遇到<code>await</code>会立即执行表达式，然后把表达式后面的代码放到微任务队列里，让出执行栈让同步代码先执行。</p></blockquote><h1 id="Vue-的父组件和子组件生命周期钩子执行顺序是什么"><a href="#Vue-的父组件和子组件生命周期钩子执行顺序是什么" class="headerlink" title="Vue 的父组件和子组件生命周期钩子执行顺序是什么"></a>Vue 的父组件和子组件生命周期钩子执行顺序是什么</h1><blockquote><ul><li>加载渲染过程 父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</li></ul></blockquote><blockquote><ul><li>子组件更新过程 父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</li><li>父组件更新过程 父beforeUpdate-&gt;父updated</li><li>销毁过程 父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分析比较opacity-0、display-none、visibility-hidden的优劣和适用场景。&quot;&gt;&lt;a href=&quot;#分析比较opacity-0、display-none、visibility-hidden的优劣和适用场景。&quot; class=&quot;headerlink&quot; title=&quot;分析比较opacity:0、display:none、visibility: hidden的优劣和适用场景。&quot;&gt;&lt;/a&gt;分析比较opacity:0、display:none、visibility: hidden的优劣和适用场景。&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;结构&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:none&lt;/code&gt;会让元素完全从渲染树消失，渲染的时候不占空间，不能点击&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;opacity:0&lt;/code&gt;不会让元素从渲染树消失，占据空间可以点击，只是你看不见它&lt;/li&gt;
&lt;li&gt;&lt;code&gt;visibility:hidden&lt;/code&gt;不会让元素从渲染树消失，占据空间可以点击，但是不能点击&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;继承&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display:none&lt;/code&gt;和&lt;code&gt;opacity:0&lt;/code&gt;都是非继承属性，就是说子孙节点怎么改，只要父节点设置了隐藏，子孙节点都不会显示。子孙节点消失是因为渲染树消失造成&lt;code&gt;visibility:hidden&lt;/code&gt;是继承属性，子孙节点消失是由于继承了&lt;code&gt;visibility:hidden&lt;/code&gt;，只要子孙节点在自身设置&lt;code&gt;visibility:visible&lt;/code&gt;就可以显示&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="面试题" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE01-Vue%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE01-Vue%E7%BB%84%E4%BB%B6/</id>
    <published>2020-03-16T01:45:34.987Z</published>
    <updated>2019-11-04T14:25:59.921Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>该课目标：</p><ul><li>实现一个购物车案例</li><li>模拟 elementui 设计并实现一个表单组件</li></ul></blockquote><h2 id="实现一个购物车案例"><a href="#实现一个购物车案例" class="headerlink" title="实现一个购物车案例"></a>实现一个购物车案例</h2><blockquote><p>实现功能</p><ul><li>点击添加到课程列表后，表格数据+1</li><li>购物车有勾选、数量选择，同时计算<br><img src="https://i.loli.net/2019/09/23/jQsX1iNgzLxwWoc.png" alt="20190923190345.png"></li></ul></blockquote><p>先看 dom 结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;添加课程&lt;/h2&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;&quot;&gt;课程名称：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;courseInfo.name&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;label for=&quot;&quot;&gt;课程价格：&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;courseInfo.price&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;addCourseToList&quot;&gt;添加课程到列表&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;课程列表&lt;/h2&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;th&gt;课程名称&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;课程价格&lt;/th&gt;</span><br><span class="line">      &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr v-for=&quot;(item,index) in courseList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&lt;button @click=&quot;addCourseToCart(index)&quot;&gt;添加到购物车&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>样式就不多做描述，主要了解 vue 的基础用法</p></blockquote><a id="more"></a><p>那么在 data 中写上相应的数据，并且在输入框用<code>v-model</code>双向绑定对应的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      courseInfo:&#123;</span><br><span class="line">        name:<span class="string">''</span>,</span><br><span class="line">        price: <span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      courseItem:[],</span><br><span class="line">      courseList:[</span><br><span class="line">        &#123;</span><br><span class="line">          id:<span class="number">0</span>,</span><br><span class="line">          name:<span class="string">'web全栈开发架构师'</span>,</span><br><span class="line">          price: <span class="number">9998</span></span><br><span class="line">        &#125;,&#123;</span><br><span class="line">          id:<span class="number">1</span>,</span><br><span class="line">          name:<span class="string">'Python人工智能'</span>,</span><br><span class="line">          price: <span class="number">8888</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>最后就是处理逻辑的问题，给每个按钮绑定上点击事件，这里的逻辑比较简单，就是把填写后的课程数据添加到表格中。</li><li>思路也很简单：就是把<code>courseInfo</code>这个对象放到<code>courseList</code>数组中</li><li>以及表格中的添加到购物车和移除也是对数组进行操作</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">      addCourseToCart(index)&#123;</span><br><span class="line">        <span class="keyword">let</span> item = <span class="keyword">this</span>.courseList[index];</span><br><span class="line">        <span class="comment">// 判断购物车是否已经存在这门课</span></span><br><span class="line">        <span class="keyword">let</span> isHasCourse = <span class="keyword">this</span>.courseItem.find(<span class="function"><span class="params">x</span>=&gt;</span>x.id == item.id)</span><br><span class="line">        <span class="keyword">if</span>(isHasCourse)&#123;<span class="comment">// 存在就数量＋1</span></span><br><span class="line">          isHasCourse.number += <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">// 没有就push进数组</span></span><br><span class="line">          <span class="keyword">this</span>.courseItem.push(&#123;</span><br><span class="line">            ...item,</span><br><span class="line">            number: <span class="number">1</span>,</span><br><span class="line">            isActive:<span class="literal">true</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      remove(index)&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseItem.splice(index,<span class="number">1</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      addCourseToList()&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseList.push(<span class="keyword">this</span>.courseInfo)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>到这里你会发现购物车不见了，对的！为了好维护，避免一个 vue 文件出现过多代码，把购物车这块抽离出来，简单封装成了一个组件</p></blockquote><p>购物车代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;我是购物车&lt;/h2&gt;</span><br><span class="line">  &lt;table&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;勾选&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;课程名称&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;课程价格&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;数量&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;价格&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr v-for=&quot;(item,index) in courseItem&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;td&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; v-model=&quot;item.isActive&quot; /&gt;</span><br><span class="line">      &lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.price&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;</span><br><span class="line">        &lt;button @click=&quot;minus(index)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">        &#123;&#123;item.number&#125;&#125;</span><br><span class="line">        &lt;button @click=&quot;add(index)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">      &lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;item.price*item.number&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&lt;/td&gt;</span><br><span class="line">      &lt;td colspan=&quot;2&quot;&gt;&#123;&#123;isActiveCourse&#125;&#125;/&#123;&#123;allCourseList&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td colspan=&quot;2&quot;&gt;&#123;&#123;allPrice&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>首先用<code>props</code>接收由父组件传来的数据</li><li>给 + - 按钮绑定事件，通过<code>$emit</code>发射数据给父组件</li><li>用<code>computed</code>计算总数量，总价钱；相比<code>methods</code>，会有进行缓存，提高性能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遵守单项数据流</span></span><br><span class="line">props:[<span class="string">'courseItem'</span>],</span><br><span class="line">methods:&#123;</span><br><span class="line">    minus(index)&#123;</span><br><span class="line">        <span class="keyword">let</span> number = <span class="keyword">this</span>.courseItem[index].number;</span><br><span class="line">        <span class="keyword">if</span>(number &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.courseItem[index].number -=<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">'确定要出删除吗'</span>))&#123;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'removeItem'</span>,index)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    add(index)&#123;</span><br><span class="line">        <span class="keyword">this</span>.courseItem[index].number +=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">    isActiveCourse() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.courseItem.filter(<span class="function"><span class="params">item</span>=&gt;</span>item.isActive).length</span><br><span class="line">    &#125;,</span><br><span class="line">    allCourseList() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.courseItem.length;</span><br><span class="line">    &#125;,</span><br><span class="line">    allPrice() &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.courseItem.forEach(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.isActive)&#123;</span><br><span class="line">                num+= item.price * item.number</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟-elementUI-实现一个表单验证组件"><a href="#模拟-elementUI-实现一个表单验证组件" class="headerlink" title="模拟 elementUI 实现一个表单验证组件"></a>模拟 elementUI 实现一个表单验证组件</h2><p>先看看<code>elementui</code>的验证表单是怎么用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-form :model=&quot;model&quot; :rules=&quot;rules&quot; ref=&quot;loginForm&quot;&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;</span><br><span class="line">    &lt;el-input v-model=&quot;model.username&quot; autocomplete=&quot;off&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;password&quot;&gt;</span><br><span class="line">    &lt;el-input</span><br><span class="line">      type=&quot;password&quot;</span><br><span class="line">      v-model=&quot;model.password&quot;</span><br><span class="line">      autocomplete=&quot;off&quot;</span><br><span class="line">    &gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">  &lt;el-form-item&gt;</span><br><span class="line">    &lt;el-button type=&quot;primary&quot; @click=&quot;submitForm(&apos;loginForm&apos;)&quot;&gt;提交&lt;/el-button&gt;</span><br><span class="line">  &lt;/el-form-item&gt;</span><br><span class="line">&lt;/el-form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>从上面的代码可以拆分为 3 个部分<br><img src="https://i.loli.net/2019/09/24/UCLvAYO76IMcPrD.png" alt="![20190923194930.png](httpsi.loli.net20190923N4G836C7KVmAiIf.png)"></p></blockquote><p>先从最里面的<code>el-input</code>开始封装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;input :type=&quot;type&quot; :value=&quot;value&quot; @input=&quot;onInput&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    value:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    type:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">'text'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">    onInput(e) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>,value);</span><br><span class="line">        <span class="keyword">this</span>.$parent.$emit(<span class="string">'validate'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要想在父组件中使用<code>v-model</code>，只需要给<code>input</code>绑定一个<strong>value</strong>值，然后再绑定一个<code>input</code>事件，并发射给父组件，这样就可以在外面用<code>v-model</code>，其实也就是<code>v-model</code>的语法糖<br><code>this.$parent.$emit(&#39;validate&#39;)</code>这段代码是做表单验证用的，后面会说到</p></blockquote><blockquote><p>封装好<code>k-input</code>组件后，就可以正常在父组件中使用了，跟<code>el-input</code>一样，当然是简陋版的。注意一点：<strong>组件的命名最好用头字母大写</strong>，这样当你使用的时候就可以用 a-b 方式使用，遵循 vue 官方的写法。</p></blockquote><p>接下来就是 form-item 的组件，因为需要再组件里面放东西，所以就需要<code>slot</code>插槽，插槽的具体用法可以看文档。<br>下面只是简单得使用了插槽</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;label for=&quot;&quot;&gt;&#123;&#123;label&#125;&#125;&lt;/label&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;p v-if=&quot;errStatus&quot;&gt;&#123;&#123;errMessage&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到在<code>div</code>里面用了<code>&lt;slot&gt;&lt;/slot&gt;</code>这里可以放自定义的东西。<br>下面的<code>p</code>标签则是提示校验信息</p></blockquote><p>最后就是最外层的<code>&lt;form&gt;</code>组件，跟<code>&lt;form-item&gt;</code>大致一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>直接一个插槽就搞定，只要一个<code>&lt;form&gt;</code>标签包裹，里面的内容由外部自定义</p></blockquote><h3 id="最后也是最重要的就是数据的传值、组件之间的通信，以及表单校验"><a href="#最后也是最重要的就是数据的传值、组件之间的通信，以及表单校验" class="headerlink" title="最后也是最重要的就是数据的传值、组件之间的通信，以及表单校验"></a>最后也是最重要的就是数据的传值、组件之间的通信，以及表单校验</h3><blockquote><p>从上面的<strong>组件设计思想图</strong>可以看到，校验和显示错误的这块是在<code>&lt;form-item&gt;</code>这个组件完成的，而<code>&lt;form&gt;</code>组件只是接收数据模型以及校验规则。</p></blockquote><ul><li>先简单介绍一下<code>provide / inject</code></li></ul><blockquote><p><strong>provide / inject</strong>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。(跨级通信)</p></blockquote><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件中提供</span></span><br><span class="line">  provide() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      map_nodeObj: &#123; <span class="attr">map_node</span>: <span class="keyword">this</span>.obj &#125;</span><br><span class="line">      <span class="comment">// 提示：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 子组件中引入</span></span><br><span class="line">  inject: &#123;</span><br><span class="line">    map_nodeObj: &#123;</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">map_node</span>: <span class="string">'0'</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>先看<code>&lt;input&gt;</code>组件，要怎么告诉<code>&lt;form-item&gt;</code>输入的值是不是校验成功呢？要注意的是：万一用户在<code>&lt;form-item&gt;</code>和<code>&lt;input&gt;</code>直接包了一层组件，<code>&lt;form-item&gt;</code>中只有一个<code>&lt;slot&gt;</code>，不能保证<code>$emit()</code>是正确的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onInput(e) &#123;</span><br><span class="line">        <span class="keyword">let</span> value = e.target.value;</span><br><span class="line">        <span class="keyword">this</span>.$emit(<span class="string">'input'</span>,value);</span><br><span class="line">        <span class="keyword">this</span>.$parent.$emit(<span class="string">'validate'</span>)<span class="comment">// 确保父级，指&lt;form-item&gt;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么在<code>&lt;form-item&gt;</code>中就可以监听这个事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">            <span class="keyword">this</span>.$on(<span class="string">'validate'</span>,<span class="keyword">this</span>.validator)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>然后就开始写触发<code>validate</code>事件执行的函数<code>validator</code></p><blockquote><p>先引进 async-validator 这个模块</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入了elementUI，里面集成了这个模块</span></span><br><span class="line"><span class="keyword">import</span> Schema <span class="keyword">from</span> <span class="string">'async-validator'</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来开始写校验的逻辑</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">      validator() &#123;</span><br><span class="line">          <span class="comment">//有两个input!  一个用户名 一个密码</span></span><br><span class="line">          <span class="keyword">const</span> rules = <span class="keyword">this</span>.kForm.rules[<span class="keyword">this</span>.prop];</span><br><span class="line">          <span class="keyword">const</span> value = <span class="keyword">this</span>.kForm.model[<span class="keyword">this</span>.prop];</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 描述对象</span></span><br><span class="line">          <span class="keyword">const</span> descriptor = &#123;[<span class="keyword">this</span>.prop]:rules&#125;;</span><br><span class="line">          <span class="keyword">const</span> schema = <span class="keyword">new</span> Schema(descriptor);</span><br><span class="line">          schema.validate(&#123;[<span class="keyword">this</span>.prop]:value&#125;,errors =&gt;&#123;</span><br><span class="line">              <span class="keyword">if</span>(errors)&#123;</span><br><span class="line">                  <span class="keyword">this</span>.errMessage = errors[<span class="number">0</span>].message;</span><br><span class="line">                  <span class="keyword">this</span>.errStatus = <span class="literal">true</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">this</span>.errMessage = <span class="string">''</span>;</span><br><span class="line">                  <span class="keyword">this</span>.errStatus = <span class="string">''</span>;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>会看到 <code>this.kForm.rules[this.prop]</code>这个东西，这个是从<code>&lt;k-form&gt;</code>组件 <strong>provide</strong>给<code>&lt;form-item&gt;</code>的，所以要在该组件注入一下</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;k-form-item&gt;</span></span><br><span class="line">inject: [<span class="string">'kForm'</span>];</span><br></pre></td></tr></table></figure><p>最后是<code>&lt;form&gt;</code>组件通过<code>provide</code>把整个数据传出去</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provide()&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          kForm: <span class="keyword">this</span><span class="comment">// 将组件实例作为提供者，子组件可方便获取</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="一个简单的校验表单组件就完成了"><a href="#一个简单的校验表单组件就完成了" class="headerlink" title="一个简单的校验表单组件就完成了"></a>一个简单的校验表单组件就完成了</h4><p><img src="https://i.loli.net/2019/09/24/kNE6rRWA1TGVo4d.png" alt="20190924154133.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;该课目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现一个购物车案例&lt;/li&gt;
&lt;li&gt;模拟 elementui 设计并实现一个表单组件&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现一个购物车案例&quot;&gt;&lt;a href=&quot;#实现一个购物车案例&quot; class=&quot;headerlink&quot; title=&quot;实现一个购物车案例&quot;&gt;&lt;/a&gt;实现一个购物车案例&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;实现功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击添加到课程列表后，表格数据+1&lt;/li&gt;
&lt;li&gt;购物车有勾选、数量选择，同时计算&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/09/23/jQsX1iNgzLxwWoc.png&quot; alt=&quot;20190923190345.png&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看 dom 结构&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;h2&amp;gt;添加课程&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;label for=&amp;quot;&amp;quot;&amp;gt;课程名称：&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&amp;quot;text&amp;quot; v-model=&amp;quot;courseInfo.name&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;label for=&amp;quot;&amp;quot;&amp;gt;课程价格：&amp;lt;/label&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;input type=&amp;quot;text&amp;quot; v-model=&amp;quot;courseInfo.price&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;button @click=&amp;quot;addCourseToList&amp;quot;&amp;gt;添加课程到列表&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;h2&amp;gt;课程列表&amp;lt;/h2&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;table&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;tr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;th&amp;gt;课程名称&amp;lt;/th&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;th&amp;gt;课程价格&amp;lt;/th&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;th&amp;gt;操作&amp;lt;/th&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;tr v-for=&amp;quot;(item,index) in courseList&amp;quot; :key=&amp;quot;item.id&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;td&amp;gt;&amp;#123;&amp;#123;item.name&amp;#125;&amp;#125;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;td&amp;gt;&amp;#123;&amp;#123;item.price&amp;#125;&amp;#125;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;td&amp;gt;&amp;lt;button @click=&amp;quot;addCourseToCart(index)&amp;quot;&amp;gt;添加到购物车&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/tr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/table&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;样式就不多做描述，主要了解 vue 的基础用法&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>react入门1</title>
    <link href="http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE-react%E5%85%A5%E9%97%A81/"/>
    <id>http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE-react%E5%85%A5%E9%97%A81/</id>
    <published>2020-03-16T01:45:34.973Z</published>
    <updated>2019-11-04T14:26:04.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><blockquote><p><code>npm install creat-react-app -g</code> 全局安装脚手架<br><code>creat-react-app react-test</code> 初始化一个react项目</p></blockquote><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p><img src="https://i.loli.net/2019/10/20/vgXupjxoUFdOCnW.png" alt="![Alt text](.1571365867442.png)"></p><h2 id="文件详细"><a href="#文件详细" class="headerlink" title="文件详细"></a>文件详细</h2><ul><li><p><code>src/index.js</code> 入口文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> serviceWorker <span class="keyword">from</span> <span class="string">'./serviceWorker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// React负责逻辑控制</span></span><br><span class="line"><span class="comment">// ReactDOM.render(&lt;h1&gt;react&lt;/h1&gt;, document.getElementById('root'));</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// If you want your app to work offline and load faster, you can change</span></span><br><span class="line"><span class="comment">// unregister() to register() below. Note this comes with some pitfalls.</span></span><br><span class="line"><span class="comment">// Learn more about service workers: https://bit.ly/CRA-PWA</span></span><br><span class="line">serviceWorker.unregister();</span><br></pre></td></tr></table></figure></li><li><p><code>src/App.js</code> 根组件</p><blockquote><p>跟写iview的render的写法一样</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./App.css"</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">"jerry"</span>;</span><br><span class="line">    <span class="keyword">const</span> user = &#123; <span class="attr">firstName</span>: <span class="string">"tom"</span>, <span class="attr">lastName</span>: <span class="string">"jerry"</span> &#125;;</span><br><span class="line">    <span class="keyword">const</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello, jerry<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><blockquote><p>它被称为 JSX， 一种 JavaScript 的语法扩展。 我们推荐在 React 中使用 JSX 来描述用户界面。JSX 乍看起来可能比较像是模版语言，但事实上它完全是在 JavaScript 内部实现的。</p></blockquote><p>用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>在react中使用jsx</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;prop:<span class="symbol">'some</span> prop'&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    const name = <span class="string">"jerry"</span>;</span><br><span class="line">    const user = &#123; firstName: <span class="string">"tom"</span>, lastName: <span class="string">"jerry"</span> &#125;;</span><br><span class="line">    const jsx = &lt;p&gt;hello, jerry&lt;/p&gt;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="comment">/* jsx也是表达式 */</span>&#125;</span><br><span class="line">        &#123;jsx&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>同时jsx也是一种表达式，这也就意味着，你其实可以在 if 或者 for 语句里使用 JSX，将它赋值给变量，当作参数传入，作为返回值都可以</li><li>在jsx里面可以动态给值</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;user.avatarUrl&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">img</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><blockquote><ul><li>jsx也可以嵌套使用，跟写html结构一样</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;h2&gt;Good to see you here.&lt;/</span>h2&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>注意：</code>因为 JSX 的特性更接近 JavaScript 而不是 HTML , 所以 React DOM 使用 camelCase 小驼峰命名 来定义属性的名称，而不是使用 HTML 的属性名称。class 变成了 <strong>className</strong>，而 tabindex 则对应着 <strong>tabIndex</strong></li></ul></blockquote><h2 id="数据修改：State和setState"><a href="#数据修改：State和setState" class="headerlink" title="数据修改：State和setState"></a>数据修改：State和setState</h2><blockquote><p>如果数据需要修改，并且同时需要响应式变化，就需要放在<strong>state</strong>中初始化，使用<strong>setState</strong>修改</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t'</span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 状态固定名字</span></span><br><span class="line">  state = &#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="type">Date</span>()</span><br><span class="line">  &#125;  </span><br><span class="line">  setInterval(() =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          date: <span class="keyword">new</span> <span class="type">Date</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><blockquote><p>跟 <strong>Vue</strong> 的生命周期对比起来更容易理解</p></blockquote><ul><li><p>先看<strong>Vue</strong>的</p><blockquote><p>一共8个生命周期，常用的就是<code>created()</code>、<code>mounted()</code>、<code>beforeDestory()</code> 这3个</p></blockquote></li><li><p>react的生命周期</p></li></ul><blockquote><p>分为3种状态：1.初始化 ；2.更新 ；3.销毁（跟vue类似）</p></blockquote><p>1、初始化触发3个函数：<br><code>constructor 、componentWillMount、 render 、componentDidMount</code></p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">constructor</span><span class="params">(props)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    super(props);</span></span></span><br><span class="line"><span class="function"><span class="comment">    // 常用于初始化状态</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log("1.组件构造函数执行");</span></span></span><br><span class="line"><span class="function"><span class="comment">  &#125;</span></span></span><br><span class="line"><span class="function">  <span class="title">componentWillMount</span><span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    // 此时可以访问状态和属性，可进行api调用等</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log("2.组件将要挂载");</span></span></span><br><span class="line"><span class="function"><span class="comment">  &#125;</span></span></span><br><span class="line"><span class="function">  <span class="title">componentDidMount</span><span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    // 组件已挂载，可进行状态更新操作</span></span></span><br><span class="line"><span class="function"><span class="comment">    console.log("3.组件已挂载");</span></span></span><br><span class="line"><span class="function"><span class="comment">  &#125;</span></span></span><br></pre></td></tr></table></figure><p>2、更新触发：<code>componentWillUpdate、render、componentDidUpdate</code>，跟Vue一样，平时很少用<code>updated</code>这个钩子</p><p>3、销毁时候：<code>componentWillUnmount</code> （vue的 话一般用beforeDestroy用来清除定时器等）</p><ul><li>总结：<blockquote><p>跟Vue一样，常用的还是<code>created()</code>或者<code>mounted()</code>==&gt;<code>componentDidMount</code><br>清除定时器<code>beforeDestroy</code> ==&gt;<code>componentWillUnmount</code></p></blockquote></li></ul><p>所以上面的时钟组件<strong>Clock.js</strong>可以利用生命周期钩子来创建和清除定时器</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="type">React</span>, &#123; <span class="type">Component</span> &#125; from <span class="symbol">'reac</span>t'</span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 状态固定名字</span></span><br><span class="line">  state = &#123;</span><br><span class="line">      date: <span class="keyword">new</span> <span class="type">Date</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">      <span class="keyword">this</span>.timer = setInterval(() =&gt; &#123;</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">              date: <span class="keyword">new</span> <span class="type">Date</span>()</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount()&#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>.timer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="组件-amp-Props"><a href="#组件-amp-Props" class="headerlink" title="组件 &amp; Props"></a>组件 &amp; Props</h2><blockquote><p>react的组件从概念上看就像是函数，它可以接收任意的输入值（称之为“props”），并返回一个需要在页面上展示的React元素。</p></blockquote><blockquote><p>定义组件分为<strong>函数定义</strong>和<strong>类定义</strong></p></blockquote><h3 id="函数类型的组件"><a href="#函数类型的组件" class="headerlink" title="函数类型的组件"></a>函数类型的组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">Welcome</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Welcome1, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在外部调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先引入</span></span><br><span class="line"><span class="keyword">import</span> Welcome <span class="keyword">from</span> <span class="string">'./components/Welcome'</span>;</span><br><span class="line"><span class="comment">// 再调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;    </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123; &lt;Welcome title=<span class="string">"购你好"</span>&gt;&lt;<span class="regexp">/Welcome &gt; &#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>组件名称必须以大写字母开头。小写开头的是一个DOM标签</p></blockquote><h4 id="提取组件"><a href="#提取组件" class="headerlink" title="提取组件"></a>提取组件</h4><blockquote><p>我们可以将组件细分为粒度更小的组件，先看下面没有细分的组件写法：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"Comment"</span>&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">        &lt;img className=<span class="string">"Avatar"</span></span><br><span class="line">          src=&#123;props.author.avatarUrl&#125;</span><br><span class="line">          alt=&#123;props.author.name&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;div className=<span class="string">"UserInfo-name"</span>&gt;</span><br><span class="line">          &#123;props.author.name&#125;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">      &lt;div className=<span class="string">"Comment-text"</span>&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="Comment-date"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看到，上面这个组件是一个评论组件，左侧是头像，右侧是文字和日期，这样封装可复用的部分几乎没有，其实可以把左侧用户信息部分提取出来。</p></blockquote><p>先来写头像组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Avatar</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;img className=<span class="string">"Avatar"</span></span><br><span class="line">      src=&#123;props.user.avatarUrl&#125;</span><br><span class="line">      alt=&#123;props.user.name&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是一整个UserInfo的组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserInfo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"UserInfo"</span>&gt;</span><br><span class="line">      &lt;Avatar user=&#123;props.user&#125; /&gt;</span><br><span class="line">      &lt;div className=<span class="string">"UserInfo-name"</span>&gt;</span><br><span class="line">        &#123;props.user.name&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过上面的改进，现在重新看下整个评论组件的代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Comment</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"Comment"</span>&gt;</span><br><span class="line">      &lt;UserInfo user=&#123;props.author&#125; /&gt;</span><br><span class="line">      &lt;div className=<span class="string">"Comment-text"</span>&gt;</span><br><span class="line">        &#123;props.text&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;div className="Comment-date"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;formatDate(props.date)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>更加整洁，同时当你的UI中有一部分重复使用了好几次（比如，<code>Button、Panel、Avatar</code>），或者其自身就足够复杂（比如，<code>App、FeedStory、Comment</code>），类似这些都是抽象成一个可复用组件的绝佳选择，这也是一个比较好的做法。</p></blockquote><h2 id="条件渲染和循环"><a href="#条件渲染和循环" class="headerlink" title="条件渲染和循环"></a>条件渲染和循环</h2><blockquote><p><strong>条件渲染</strong>就是判断显示哪个。可以用<code>if</code>或<code>三元运算符</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CartSample</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//   状态初始化一般放在构造器中</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      goods: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">"web全栈架构师"</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">"python全栈架构师"</span> &#125;</span><br><span class="line">      ],</span><br><span class="line">      text: <span class="string">""</span>,</span><br><span class="line">      cart: []</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.addGood = <span class="keyword">this</span>.addGood.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   回调函数声明为箭头函数</span></span><br><span class="line">  textChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">text</span>: e.target.value &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 如果不用箭头函数，就需要在构造函数绑定this</span></span><br><span class="line">addGood() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        goods: [</span><br><span class="line">          ...prevState.goods,</span><br><span class="line">          &#123;</span><br><span class="line">            id: prevState.goods.length + <span class="number">1</span>,</span><br><span class="line">            text: prevState.text</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">//   const title = this.props.title ? &lt;h1&gt;this.props.title&lt;/h1&gt; : null;</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &#123;<span class="comment">/* 条件渲染 */</span>&#125;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.title &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>&#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>循环：</strong>Vue中用的是<code>for in</code>，在react是用<code>map()</code>遍历数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;<span class="keyword">this</span>.state.goods.map(<span class="function"><span class="params">good</span> =&gt;</span> (</span><br><span class="line">    &lt;li key=&#123;good.id&#125;&gt;</span><br><span class="line">      &#123;good.text&#125;</span><br><span class="line">      &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.addToCart(good)&#125;&gt;加购&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>li&gt;</span><br><span class="line">  ))&#125;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><blockquote><p>如上面循环的代码，给<code>button</code>绑定一个点击事件用<code>onClick</code>，给输入框绑定change事件则用<code>onChange</code>，但是react是单向数据流，因此还要设置输入框的<code>value</code>，只是Vue的<code>v-modal</code>是语法糖</p></blockquote><blockquote><p>值得注意的是，通过 <code>bind</code> 方式向监听函数传参，在类组件中定义的监听函数，事件对象 <code>e</code> 要排在所传递参数的后面</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">prevent<span class="constructor">Pop(<span class="params">name</span>, <span class="params">e</span>)</span>&#123;    <span class="comment">//事件对象e要放在最后</span></span><br><span class="line">        e.prevent<span class="constructor">Default()</span>;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;npm install creat-react-app -g&lt;/code&gt; 全局安装脚手架&lt;br&gt;&lt;code&gt;creat-react-app react-test&lt;/code&gt; 初始化一个react项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;文件结构&quot;&gt;&lt;a href=&quot;#文件结构&quot; class=&quot;headerlink&quot; title=&quot;文件结构&quot;&gt;&lt;/a&gt;文件结构&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/20/vgXupjxoUFdOCnW.png&quot; alt=&quot;![Alt text](.1571365867442.png)&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文件详细&quot;&gt;&lt;a href=&quot;#文件详细&quot; class=&quot;headerlink&quot; title=&quot;文件详细&quot;&gt;&lt;/a&gt;文件详细&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/index.js&lt;/code&gt; 入口文件&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;react-dom&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./index.css&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./App&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; serviceWorker &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;./serviceWorker&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// React负责逻辑控制&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ReactDOM.render(&amp;lt;h1&amp;gt;react&amp;lt;/h1&amp;gt;, document.getElementById(&#39;root&#39;));&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ReactDOM.render(&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;App&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// If you want your app to work offline and load faster, you can change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// unregister() to register() below. Note this comes with some pitfalls.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Learn more about service workers: https://bit.ly/CRA-PWA&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;serviceWorker.unregister();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;src/App.js&lt;/code&gt; 根组件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;跟写iview的render的写法一样&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; Component &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;./App.css&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Component&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  render() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;jerry&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; user = &amp;#123; &lt;span class=&quot;attr&quot;&gt;firstName&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;tom&quot;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;lastName&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;jerry&quot;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; jsx = &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;hello, jerry&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;div&amp;gt; &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt; &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    );&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;export default App;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>node基础</title>
    <link href="http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE-nodeJs%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE-nodeJs%E5%9F%BA%E7%A1%80/</id>
    <published>2020-03-16T01:45:34.963Z</published>
    <updated>2019-11-04T14:26:07.449Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>MVVM实现原理</title>
    <link href="http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE-MVVM%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE-MVVM%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2020-03-16T01:45:34.951Z</published>
    <updated>2019-11-07T08:15:43.341Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>先看下 Vue 是怎样写的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;!-- 双向绑定 --&gt;</span><br><span class="line">  &lt;input type=&quot;type&quot; v-model=&quot;message&quot; /&gt;</span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>根据上面的代码，实现一个简易版的<strong>MVVM</strong>框架</p></blockquote><a id="more"></a><h3 id="Vue-中双向绑定的原理"><a href="#Vue-中双向绑定的原理" class="headerlink" title="Vue 中双向绑定的原理"></a>Vue 中双向绑定的原理</h3><p><img src="https://i.loli.net/2019/10/24/jGBEHtcq4T9n6bD.png" alt="20191024153914.png"></p><blockquote><p>上图总结，Vue 的双向绑定就是</p></blockquote><ul><li>模板编译</li><li>数据劫持</li><li>观察数据的变化(watcher)</li></ul><p><img src="https://i.loli.net/2019/10/24/iz63T8AFKxMyHms.png" alt="20191024154232.png"><br>(简易版 vue 原理)</p><blockquote><p>从上面两张图可以知道：一个<strong>MVVM</strong>分为<strong>模版编译</strong>和<strong>数据劫持</strong>两个方面,然后整合到 MVVM 中。</p></blockquote><h3 id="MVVM-js"><a href="#MVVM-js" class="headerlink" title="MVVM.js"></a>MVVM.js</h3><blockquote><p>因为使用<code>vue</code>是先<code>new</code>一个实例，所以他是一个构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVVM</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// 一上来，先把可用的东西挂载到实例上</span></span><br><span class="line">    <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">    <span class="keyword">this</span>.$data = options.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有要编译的模板，就开始编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">      <span class="keyword">new</span> Compile(<span class="keyword">this</span>.$el, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译-Compile"><a href="#编译-Compile" class="headerlink" title="编译 Compile"></a>编译 Compile</h3><blockquote><p>MVVM 只是作为一个桥梁。下面开始写<code>compile.js</code><br>先在<code>index.html</code>引入，然后<code>new MVVM</code>的实例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;message&quot; /&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;./compile.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;./MVVM.JS&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    let vm = new MVVM(&#123;</span><br><span class="line">      el: &apos;#app&apos;,</span><br><span class="line">      data: &#123;</span><br><span class="line">        message: &apos;hello&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>compile.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 两个参数：一个当前元素；一个是当前实例</span></span><br><span class="line">  <span class="keyword">constructor</span>(el, vm) &#123;</span><br><span class="line">    <span class="keyword">this</span>.el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="comment">// 如果有这个元素，才开始编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.el) &#123;</span><br><span class="line">      <span class="comment">// 先把真实DOM移入到内存中 fragment==文档碎片;解析模板的过程中为了性能</span></span><br><span class="line">      <span class="keyword">let</span> fragment = <span class="keyword">this</span>.nodeToFragment(<span class="keyword">this</span>.el);</span><br><span class="line">      <span class="comment">// 然后开始编译==&gt;提取出想要的元素节点：v-model  文本节点：&#123;&#123;&#125;&#125;</span></span><br><span class="line">      <span class="keyword">this</span>.compile(fragment);</span><br><span class="line">      <span class="comment">// 最后将编译好的文档碎片塞回页面去</span></span><br><span class="line">      <span class="keyword">this</span>.el.appendChild(fragment);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/*一些辅助函数*/</span></span><br><span class="line">  <span class="comment">// 判断是否是元素节点</span></span><br><span class="line">  isElementNode(node) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  核心函数 */</span></span><br><span class="line">  <span class="comment">// 创建文档碎片</span></span><br><span class="line">  nodeToFragment(el) &#123;</span><br><span class="line">    <span class="comment">// 文档碎片 内存中的DOM节点</span></span><br><span class="line">    <span class="keyword">let</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="keyword">let</span> firstChild;</span><br><span class="line">    <span class="keyword">while</span> ((firstChild = el.firstChild)) &#123;</span><br><span class="line">      fragment.appendChild(firstChild);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fragment;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行上面的代码之后，页面的元素已经被移到内存中了<br>根标签中是空的<br><img src="https://i.loli.net/2019/10/24/KiTemIG6s7arzXL.png" alt="20191024164549.png"></p></blockquote><p>下面开始执行第二部==&gt;编译</p><blockquote><p><code>compile()</code>属于核心方法，需要接收一个文档碎片的参数</p><ul><li>因为标签是有嵌套的，所以需要递归才能获取所有的标签</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">compile(fragment)&#123;</span><br><span class="line">  <span class="comment">// 先拿到所有的子节点</span></span><br><span class="line">  <span class="keyword">let</span> childNodes = fragment.childNodes; <span class="comment">//返回一个文档集合(类数组)</span></span><br><span class="line">  <span class="built_in">Array</span>.from(childNodes).forEach(<span class="function"><span class="params">node</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isElementNode(node)) &#123;</span><br><span class="line">        <span class="comment">//如果是元素节点,那么就要继续深入检查</span></span><br><span class="line">        <span class="comment">// 编译元素</span></span><br><span class="line">        <span class="keyword">this</span>.compileElement(node);</span><br><span class="line">        <span class="keyword">this</span>.compile(node);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//如果是文本节点</span></span><br><span class="line">        <span class="comment">// 编译文本</span></span><br><span class="line">        <span class="keyword">this</span>.compileText(node);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>下面开始实现<code>compileElement()</code>和<code>compileText()</code>这两个核心方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译元素的方法：检查是否带有v-</span></span><br><span class="line">compileElement(node)&#123;</span><br><span class="line">  <span class="comment">//获取当前元素的属性：type,v-model。。。</span></span><br><span class="line">  <span class="keyword">let</span> attrs=node.attributes; <span class="comment">////返回一个类数组</span></span><br><span class="line">  <span class="built_in">Array</span>.from(attrs).forEach(<span class="function"><span class="params">attr</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// attr有name=v-model，和value两个值</span></span><br><span class="line">    <span class="keyword">let</span> attrName=attr.name;</span><br><span class="line">    <span class="comment">// 判断是否是v-开头的自定义属性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isDirective(attrName)) &#123;</span><br><span class="line">        <span class="comment">// 取到对应的值并放到节点中：在data中取值</span></span><br><span class="line">        <span class="keyword">let</span> expr = attr.value;</span><br><span class="line">        <span class="keyword">let</span> [, type] = attrName.split(<span class="string">'-'</span>); <span class="comment">//解构出后面的model</span></span><br><span class="line">        CompileUtil[type](node, <span class="keyword">this</span>.vm, expr);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译文本方法</span></span><br><span class="line">  compileText(node) &#123;</span><br><span class="line">    <span class="comment">// 检查是否带有&#123;&#123;message&#125;&#125;</span></span><br><span class="line">    <span class="keyword">let</span> expr = node.textContent; <span class="comment">//取文本中的内容&#123;&#123;message&#125;&#125;</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>;</span><br><span class="line">    <span class="keyword">if</span> (reg.test(expr)) &#123;</span><br><span class="line">      CompileUtil[<span class="string">'text'</span>](node, <span class="keyword">this</span>.vm, expr);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面用到了<code>isDirective()</code>这个辅助函数，以及<code>CompileUtil</code>这个工具类</p></blockquote><p><strong>isDirective</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是不是指令</span></span><br><span class="line">  isDirective(name) &#123;</span><br><span class="line">    <span class="keyword">return</span> name.includes(<span class="string">'v-'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>CompileUtil</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">CompileUtil = &#123;</span><br><span class="line">  getVal(vm, expr) &#123;</span><br><span class="line">    <span class="comment">//获取实例上对应的数据</span></span><br><span class="line">    <span class="comment">// expr=message.name.age</span></span><br><span class="line">    expr = expr.split(<span class="string">'.'</span>); <span class="comment">// [message,name,age]</span></span><br><span class="line">    <span class="keyword">return</span> expr.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.$data);</span><br><span class="line">  &#125;,</span><br><span class="line">  getTextValue(vm, expr) &#123;</span><br><span class="line">    <span class="comment">//获取编译文本后的结果</span></span><br><span class="line">    <span class="keyword">return</span> expr.replace(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, (...arguments) =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getVal(vm, <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  text(node, vm, expr) &#123;</span><br><span class="line">    <span class="comment">// 文本处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.updater[<span class="string">'textUpdater'</span>];</span><br><span class="line">    <span class="comment">// 这里需要抽离获取文本数据的方法</span></span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.getTextValue(vm, expr);</span><br><span class="line">    updateFn &amp;&amp; updateFn(node, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  model(node, vm, expr) &#123;</span><br><span class="line">    <span class="comment">// 输入框处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.updater[<span class="string">'modelUpdater'</span>];</span><br><span class="line">    <span class="comment">// 问题来了：如果是嵌套数据&#123;message:&#123;a:1&#125;&#125;</span></span><br><span class="line">    <span class="comment">// 取到的表达式就是message.a ==&gt; vm.$data['message.a']</span></span><br><span class="line">    updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr));</span><br><span class="line">  &#125;,</span><br><span class="line">  updater: &#123;</span><br><span class="line">    <span class="comment">// 更新数据</span></span><br><span class="line">    textUpdater(node, value) &#123;</span><br><span class="line">      node.textContent = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    modelUpdater(node, value) &#123;</span><br><span class="line">      node.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>写完之后，一切准备就绪，刷新页面！<br><img src="https://i.loli.net/2019/10/24/KgdmqT8NuVcMEzD.png" alt="20191024203356.png"><br><img src="https://i.loli.net/2019/10/24/MbukW5QKpSGfns4.png" alt="20191024203615.png"></p></blockquote><blockquote><p>可以看到，在 data 中的数据成功在页面上显示！ <strong>Compile</strong>完成</p></blockquote><h3 id="数据劫持-Observer"><a href="#数据劫持-Observer" class="headerlink" title="数据劫持 Observer"></a>数据劫持 Observer</h3><p>在 <code>MVVM.js</code>中 new <code>Observer()</code>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MVVM</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="comment">// 一上来，先把可用的东西挂载到实例上</span></span><br><span class="line">    <span class="keyword">this</span>.$el = options.el;</span><br><span class="line">    <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">    <span class="comment">// 如果有要编译的模板，就开始编译</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</span><br><span class="line">      <span class="comment">// 数据劫持就是把对象的所有属性变成get和set方法</span></span><br><span class="line">      <span class="keyword">new</span> Observer(<span class="keyword">this</span>.$data);</span><br><span class="line">      <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">      <span class="keyword">new</span> Compile(<span class="keyword">this</span>.$el, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>observer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.observe(data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将data的原有数据改成get和set形式</span></span><br><span class="line">  observe(data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 下面开始对数据一一劫持，先拿到data的key和value</span></span><br><span class="line">    <span class="comment">// Object.keys(data) 返回的是一个数组 [key1,key2]</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 劫持</span></span><br><span class="line">      <span class="keyword">this</span>.defineReactive(data, key, data[key]); <span class="comment">//data:哪个对象定义，key：定义谁，data[key]：定义的值</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果data[key]是一个对象</span></span><br><span class="line">      <span class="keyword">this</span>.observe(data[key]); <span class="comment">//深度递归劫持</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义响应式</span></span><br><span class="line">  defineReactive(obj, key, value) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span>; <span class="comment">//存储this</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">      <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="comment">// 取值的时候触发</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue !== value) &#123;</span><br><span class="line">          <span class="comment">// 需要注意，当设置了一个新值是对象</span></span><br><span class="line">          <span class="comment">// 这里面的this不是实例</span></span><br><span class="line">          that.observe(newValue); <span class="comment">//如果是对象继续劫持</span></span><br><span class="line">          value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码并不难，利用<code>Object.defineProperty()</code>对数据进行 <strong>get</strong>和 <strong>set</strong>，但是现在页面上并不能实时更新数据，也就是说数据变了，但是没有编译。</p></blockquote><blockquote><p>那么就需要一个观察者 <strong>watcher</strong>将两者联系起来，如上面的图示。</p></blockquote><h3 id="观察者watcher"><a href="#观察者watcher" class="headerlink" title="观察者watcher"></a>观察者watcher</h3><blockquote><p>观察者的目的就是给需要变化的那个元素增加一个观察者，当数据变化后执行对应的方法</p></blockquote><p><strong>watcher.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 接收一个实例的数据 ，表达式，还有变化后的回调</span></span><br><span class="line">  <span class="keyword">constructor</span>(vm, expr, cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.expr = expr;</span><br><span class="line">    <span class="keyword">this</span>.cb = cb;</span><br><span class="line">    <span class="comment">// 先获取老值</span></span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get();</span><br><span class="line">  &#125;</span><br><span class="line">  getVal(vm, expr) &#123;</span><br><span class="line">    <span class="comment">//获取实例上对应的数据</span></span><br><span class="line">    <span class="comment">// expr=message.name.age</span></span><br><span class="line">    expr = expr.split(<span class="string">'.'</span>); <span class="comment">// [message,name,age]</span></span><br><span class="line">    <span class="keyword">return</span> expr.reduce(<span class="function">(<span class="params">prev, next</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.$data);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span>() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.getVal(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr);</span><br><span class="line">    Dep.target = <span class="literal">null</span>; <span class="comment">//用完要清空</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对外暴露的更新方法</span></span><br><span class="line">  update() &#123;</span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="keyword">this</span>.getVal(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr);</span><br><span class="line">    <span class="keyword">let</span> oldValue = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">if</span> (newValue != oldValue) &#123;</span><br><span class="line">      <span class="keyword">this</span>.cb(newValue); <span class="comment">//变化就执行</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>watcher主要是获取值，并且比较两个值，不同就触发对外暴露的方法<code>update()</code></p></blockquote><p>那么问题来了：什么时候需要调用观察者呢？</p><blockquote><p>应该在获取和设置数据的时候，加一个watcher</p></blockquote><p><strong>compile.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">text(node, vm, expr) &#123;</span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.updater[<span class="string">'textUpdater'</span>];</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.getTextValue(vm, expr);</span><br><span class="line">    <span class="comment">// 同理，调用watcher，需要注意&#123;&#123;a&#125;&#125; &#123;&#123;b&#125;&#125;这种情况</span></span><br><span class="line">    expr.replace(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>, (...arguments) =&gt; &#123;</span><br><span class="line">      <span class="keyword">new</span> Watcher(vm, <span class="built_in">arguments</span>[<span class="number">1</span>], newValue =&gt; &#123;</span><br><span class="line">        <span class="comment">// 如果数据变化了，文本节点需要重新获取依赖的属性更新文本中的内容</span></span><br><span class="line">        updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getTextValue(vm, expr));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    updateFn &amp;&amp; updateFn(node, value);</span><br><span class="line">  &#125;,</span><br><span class="line">model(node, vm, expr) &#123;</span><br><span class="line">  <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.updater[<span class="string">'modelUpdater'</span>];</span><br><span class="line">  <span class="comment">// 这里应该加一个监控，数据变化了，应该调用这个watch和cb</span></span><br><span class="line">  <span class="keyword">new</span> Watcher(vm, expr, newValue =&gt; &#123;</span><br><span class="line">    <span class="comment">// 当值变化后会调用cb，将新的值传过来     </span></span><br><span class="line">    updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr));</span><br><span class="line">  &#125;);</span><br><span class="line">  updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>问题又来了，上面只是new了一个<code>Watcher</code>但是并没有调用他的<code>update()</code>，什么时候调用<code>update()</code>呢？</p></blockquote><blockquote><p>我们需要在数据劫持的<code>set</code>的时候调用这个方法</p></blockquote><blockquote><p>结合上面的图，需要一个 <code>Dep</code>来存放订阅者</p></blockquote><p><strong>observer.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 订阅的数组</span></span><br><span class="line">    <span class="keyword">this</span>.subs = [];</span><br><span class="line">  &#125;</span><br><span class="line">  addSub(watcher) &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.push(watcher);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 一调用set就更新</span></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">watcher</span> =&gt;</span> watcher.update());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个<code>Dep</code>实现了调用<code>update()</code>方法，但是自己还没用到鸭？下面来捋一捋：</p></blockquote><ul><li>当我们<code>new Watcher</code>的时候，调用了<code>this.get()</code>这个取值的方法</li><li>当取值了，就会调用观察者的<code>get()</code></li><li>那么我们就在调用<code>get()</code>的时候，把数据放进订阅的数组中</li></ul><blockquote><p>在<code>watcher</code>的<code>get()</code>，在获取值前先把<code>watcher</code>的实例放过去<code>Dep.target</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span>() &#123;</span><br><span class="line">    Dep.target = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">this</span>.getVal(<span class="keyword">this</span>.vm, <span class="keyword">this</span>.expr);</span><br><span class="line">    Dep.target = <span class="literal">null</span>; <span class="comment">//用完要清空</span></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>observer</code>的响应式方法中，<code>new Dep()</code>这个实例</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dep = <span class="keyword">new</span> Dep(); <span class="comment">//每个变化的数据，都会对应一个数组，这个数组时存放所有更新的操作</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">        <span class="comment">// 取值的时候触发</span></span><br><span class="line">        Dep.target &amp;&amp; dep.addSub(Dep.target); <span class="comment">//如果有，就放进数组。第一次并没有值，只有当new Watcher才有值</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>下面就是<code>set()</code>了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue != value) &#123;</span><br><span class="line">          <span class="comment">// 需要注意，当设置了一个新值是对象</span></span><br><span class="line">          <span class="comment">// 这里面的this不是实例</span></span><br><span class="line">          that.observe(newValue); <span class="comment">//如果是对象继续劫持</span></span><br><span class="line">          value = newValue;</span><br><span class="line">          dep.notify(); <span class="comment">//通知所有人数据更新了</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么在控制台更改data的值，页面上也会变化</p></blockquote><p><img src="https://i.loli.net/2019/10/24/4oIXS6HuMscyPJE.png" alt="20191024231213.png"></p><h3 id="给输入框绑定事件"><a href="#给输入框绑定事件" class="headerlink" title="给输入框绑定事件"></a>给输入框绑定事件</h3><blockquote><p>上面已经完成了大部分，只是输入框的值得变化这部分还没有实现</p></blockquote><ul><li>只要给输入框绑定<code>input</code>事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">setVal(vm, expr, value) &#123;</span><br><span class="line">    expr = expr.split(<span class="string">'.'</span>);</span><br><span class="line">    <span class="keyword">return</span> expr.reduce(<span class="function">(<span class="params">prev, next, curIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (curIndex === expr.length - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果取到数组最后一个时就要设置值， [message,a]</span></span><br><span class="line">        <span class="keyword">return</span> prev[next] = value;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> prev[next];</span><br><span class="line">    &#125;, vm.$data);</span><br><span class="line">  &#125;,</span><br><span class="line">  model(node, vm, expr) &#123;</span><br><span class="line">    <span class="comment">// 输入框处理</span></span><br><span class="line">    <span class="keyword">let</span> updateFn = <span class="keyword">this</span>.updater[<span class="string">'modelUpdater'</span>];</span><br><span class="line">    <span class="comment">// 问题来了：如果是嵌套数据&#123;message:&#123;a:1&#125;&#125;</span></span><br><span class="line">    <span class="comment">// 取到的表达式就是message.a ==&gt; vm.$data['message.a']</span></span><br><span class="line">    <span class="comment">// 这里应该加一个监控，数据变化了，应该调用这个watch和cb</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(vm, expr, newValue =&gt; &#123;</span><br><span class="line">      <span class="comment">// 当值变化后会调用cb，将新的值传过来</span></span><br><span class="line">      updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr));</span><br><span class="line">    &#125;);</span><br><span class="line">    node.addEventListener(<span class="string">'input'</span>, e =&gt; &#123;</span><br><span class="line">      <span class="keyword">let</span> newValue = e.target.value;</span><br><span class="line">      <span class="keyword">this</span>.setVal(vm, expr, newValue);</span><br><span class="line">    &#125;);</span><br><span class="line">    updateFn &amp;&amp; updateFn(node, <span class="keyword">this</span>.getVal(vm, expr));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="简易版的MVVM框架就完成了"><a href="#简易版的MVVM框架就完成了" class="headerlink" title="简易版的MVVM框架就完成了"></a>简易版的MVVM框架就完成了</h3>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;先看下 Vue 是怎样写的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;!-- 双向绑定 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;input type=&amp;quot;type&amp;quot; v-model=&amp;quot;message&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#123;&amp;#123;message&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  el: &lt;span class=&quot;string&quot;&gt;&#39;#app&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message: &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;根据上面的代码，实现一个简易版的&lt;strong&gt;MVVM&lt;/strong&gt;框架&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>node基础</title>
    <link href="http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE--node/"/>
    <id>http://yoursite.com/2020/03/16/%E6%9E%B6%E6%9E%84%E8%AF%BE--node/</id>
    <published>2020-03-16T01:45:34.939Z</published>
    <updated>2020-01-08T06:03:01.016Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>原生js实现jq常用api</title>
    <link href="http://yoursite.com/2020/03/16/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0Jquery%E5%B8%B8%E7%94%A8api/"/>
    <id>http://yoursite.com/2020/03/16/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0Jquery%E5%B8%B8%E7%94%A8api/</id>
    <published>2020-03-16T01:45:34.922Z</published>
    <updated>2019-08-12T02:24:17.600Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用原生-js-实现-模仿-常用的-jq-的一些-api-获取-DOM-节点，以及操作-DOM-，并封装成一个工具库util-js"><a href="#用原生-js-实现-模仿-常用的-jq-的一些-api-获取-DOM-节点，以及操作-DOM-，并封装成一个工具库util-js" class="headerlink" title="用原生 js 实现(模仿)常用的 jq 的一些 api(获取 DOM 节点，以及操作 DOM)，并封装成一个工具库util.js"></a>用原生 js 实现(模仿)常用的 jq 的一些 api(获取 DOM 节点，以及操作 DOM)，并封装成一个工具库<code>util.js</code></h2><blockquote><p>本工具库用的都是 es5 的语法（考虑到兼容性）</p></blockquote><ul><li>先用一个自执行函数包裹，防止变量污染，再把方法名暴露出去</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> utils=(function()&#123;</span><br><span class="line">  <span class="comment">//处理IE兼容问题</span></span><br><span class="line">  <span class="keyword">var</span> flag='getComputedStyle' <span class="keyword">in</span> <span class="keyword">window</span></span><br><span class="line">  <span class="comment">//因为IE9以上的浏览器才兼容getComputedStyle()方法</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  do something...</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="comment">//-&gt;把外界需要使用的方法暴露给utils</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">win</span>: <span class="keyword">win</span>,<span class="comment">//操作浏览器的盒子模型信息</span></span><br><span class="line">        offset: offset,<span class="comment">//获取页面中任意元素距离BODY的偏移</span></span><br><span class="line">        listToArray: listToArray,<span class="comment">//把类数组集合转换为数组</span></span><br><span class="line">        children: children,<span class="comment">//获取所有的元素子节点</span></span><br><span class="line">        prev: prev,<span class="comment">//获取上一个哥哥元素节点</span></span><br><span class="line">        next: next,<span class="comment">//获取下一个弟弟元素节点</span></span><br><span class="line">        prevAll: prevAll,<span class="comment">//获取所有哥哥节点</span></span><br><span class="line">        nextAll: nextAll,<span class="comment">//获取所有弟弟节点</span></span><br><span class="line">        sibling: sibling,<span class="comment">//获取相邻的两个元素节点</span></span><br><span class="line">        siblings: siblings,<span class="comment">//获取所有的兄弟元素节点</span></span><br><span class="line">        index: index,<span class="comment">//获取当前元素的索引</span></span><br><span class="line">        firstChild: firstChild,<span class="comment">//获取第一个元素子节点</span></span><br><span class="line">        lastChild: lastChild,<span class="comment">//获取最后一个元素子节点</span></span><br><span class="line">        <span class="keyword">append</span>: <span class="keyword">append</span>,<span class="comment">//向指定容器的末尾追加元素</span></span><br><span class="line">        prepend: prepend,<span class="comment">//向指定容器的开头追加元素</span></span><br><span class="line">        insertBefore: insertBefore,<span class="comment">//把新元素(newEle)追加到指定元素(oldEle)的前面</span></span><br><span class="line">        insertAfter: insertAfter,<span class="comment">//把新元素(newEle)追加到指定元素(oldEle)的后面</span></span><br><span class="line">        hasClass: hasClass,<span class="comment">//验证当前元素中是否包含className这个样式类名</span></span><br><span class="line">        addClass: addClass,<span class="comment">//给元素增加样式类名</span></span><br><span class="line">        removeClass: removeClass,<span class="comment">//给元素移除样式类名</span></span><br><span class="line">        getElementsByClass: getElementsByClass,<span class="comment">//通过元素的样式类名获取一组元素集合</span></span><br><span class="line">        getCss:getCss,<span class="comment">//获取元素的样式值</span></span><br><span class="line">        css: css<span class="comment">//此方法实现了获取、单独设置、批量设置元素的样式值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>把类数组转换成数组 <code>listToArray</code></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listToArray</span><span class="params">(likeAry)</span> &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> Array.prototype.slice.call(likeAry, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        var ary = [];</span><br><span class="line">        <span class="keyword">for</span> (var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; likeAry.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">            ary[ary.<span class="built_in">length</span>] = likeAry[<span class="built_in">i</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ary;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>获取页面中任意元素距离 <strong>BODY</strong> 的偏移<code>offset</code><blockquote><p><code>offset(box)</code></p></blockquote></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">offset</span><span class="params">(curEl)</span></span>&#123;</span><br><span class="line">  <span class="comment">//offsetParent属性返回一个对象的引用，这个对象是距离调用offsetParent的元素最近的（在包含层次中最靠近的），并且是已进行过CSS定位的容器元素。 如果这个容器元素未进行CSS定位, 则offsetParent属性的取值为根元素</span></span><br><span class="line">  <span class="keyword">var</span> disLeft = curEle.offsetLeft, disTop = curEle.offsetTop, par = curEle.offsetParent;</span><br><span class="line">        <span class="keyword">while</span> (par) &#123;</span><br><span class="line">            disLeft += par.offsetLeft;</span><br><span class="line">            disTop += par.offsetTop;</span><br><span class="line">            par = par.offsetParent;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;left: disLeft, top: disTop&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>操作浏览器的盒子模型信息<code>win(attr,value)</code></li></ul><blockquote><p><code>attr属性</code>、<code>value设置值</code></p></blockquote><blockquote><p><code>win(scrollTop,100)</code>设置 scrollTop, 没传第二个参数则是获取</p></blockquote><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> win(attr,<span class="keyword">value</span>)&#123;</span><br><span class="line">   <span class="keyword">if</span> (typeof <span class="keyword">value</span> === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span><span class="built_in"> document</span>.documentElement[attr] ||<span class="built_in"> document</span>.body[attr];</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="built_in"> document</span>.documentElement[attr] = <span class="keyword">value</span>;</span><br><span class="line">       <span class="built_in"> document</span>.body[attr] = <span class="keyword">value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取所有的元素子节点<code>children(curEl,tagName)</code><blockquote><p><code>children(&#39;ul-box&#39;,&#39;li&#39;)</code> 获取 ul-box 下所有的 li</p></blockquote></li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(curEl,tagName)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr=[];</span><br><span class="line">  <span class="keyword">if</span>(!flag)&#123;<span class="comment">//IE9以下不支持children api</span></span><br><span class="line">    <span class="comment">//需要获取当前元素的子节点，在判断是否为元素节点：nodeType===1</span></span><br><span class="line">    <span class="keyword">var</span> nodeList = curEle.childNodes;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodeList.length; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> curNode = nodeList[i];</span><br><span class="line">                curNode.nodeType == <span class="number">1</span> ? ary[ary.length] = curNode : <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nodeList = <span class="literal">null</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//返回值类型：HTMLCollection , 包含当前元素的所有子元素节点（Element Node）的有序列表集合。如果没有子元素节点那么该集合的长度为0;</span></span><br><span class="line">    arr=<span class="keyword">this</span>.listToArray(curEl.children);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果有第二个参数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tagName == <span class="string">"string"</span>) &#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; ary.length; k++) &#123;</span><br><span class="line">           <span class="keyword">var</span> curEleNode = ary[k];</span><br><span class="line">           <span class="keyword">if</span> (curEleNode.nodeName.toLowerCase() !== tagName.toLowerCase()) &#123;</span><br><span class="line">           ary.splice(k, <span class="number">1</span>);</span><br><span class="line">             k--;<span class="comment">//防止数组塌陷</span></span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>一系列获取节点的方法</p><blockquote><p>首先获取当前元素的上一个哥哥节点,判断是否为元素节点,不是的话基于当前的继续找上面的哥哥节点…一直到找到哥哥元素节点为止,如果没有哥哥元素节点,返回null即可</p></blockquote><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取上一个哥哥元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prev</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">return</span> curEle.previousElementSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> pre = curEle.previousSibling;</span><br><span class="line">        <span class="keyword">while</span> (pre &amp;&amp; pre.nodeType !== <span class="number">1</span>) &#123;</span><br><span class="line">            pre = pre.previousSibling;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 获取下一个弟弟元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> curEle.nextElementSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nex = curEle.nextSibling;</span><br><span class="line">    <span class="keyword">while</span> (nex &amp;&amp; nex.nodeType !== <span class="number">1</span>) &#123;</span><br><span class="line">        nex = nex.nextSibling;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-&gt;prevAll:获取所有的哥哥元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prevAll</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ary = [];</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="keyword">this</span>.prev(curEle);</span><br><span class="line">    <span class="keyword">while</span> (pre) &#123;</span><br><span class="line">        ary.unshift(pre);</span><br><span class="line">        pre = <span class="keyword">this</span>.prev(pre);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;nextAll:获取所有的弟弟元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nextAll</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ary = [];</span><br><span class="line">    <span class="keyword">var</span> nex = <span class="keyword">this</span>.next(curEle);</span><br><span class="line">    <span class="keyword">while</span> (nex) &#123;</span><br><span class="line">        ary.push(nex);</span><br><span class="line">        nex = <span class="keyword">this</span>.next(nex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;sibling:获取相邻的两个元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sibling</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="keyword">this</span>.prev(curEle);</span><br><span class="line">    <span class="keyword">var</span> nex = <span class="keyword">this</span>.next(curEle);</span><br><span class="line">    <span class="keyword">var</span> ary = [];</span><br><span class="line">    pre ? ary.push(pre) : <span class="literal">null</span>;</span><br><span class="line">    nex ? ary.push(nex) : <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;siblings:获取所有的兄弟元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">siblings</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prevAll(curEle).concat(<span class="keyword">this</span>.nextAll(curEle));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;index:获取当前元素的索引</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.prevAll(curEle).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;firstChild:获取第一个元素子节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstChild</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chs = <span class="keyword">this</span>.children(curEle);</span><br><span class="line">    <span class="keyword">return</span> chs.length &gt; <span class="number">0</span> ? chs[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;lastChild:获取最后一个元素子节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lastChild</span><span class="params">(curEle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chs = <span class="keyword">this</span>.children(curEle);</span><br><span class="line">    <span class="keyword">return</span> chs.length &gt; <span class="number">0</span> ? chs[chs.length - <span class="number">1</span>] : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>操作DOM的方法：插入</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-&gt;append:向指定容器的末尾追加元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">append</span></span>(<span class="keyword">new</span><span class="type">Ele</span>, container) &#123;</span><br><span class="line">    container.appendChild(<span class="keyword">new</span><span class="type">Ele</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;prepend:向指定容器的开头追加元素</span></span><br><span class="line"><span class="comment">//-&gt;把新的元素添加到容器中第一个子元素节点的前面,如果一个元素子节点都没有,就放在末尾即可</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepend</span></span>(<span class="keyword">new</span><span class="type">Ele</span>, container) &#123;</span><br><span class="line">    <span class="keyword">var</span> fir = <span class="built_in">this</span>.firstChild(container);</span><br><span class="line">    <span class="keyword">if</span> (fir) &#123;</span><br><span class="line">        container.insertBefore(<span class="keyword">new</span><span class="type">Ele</span>, fir);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    container.appendChild(<span class="keyword">new</span><span class="type">Ele</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;insertBefore:把新元素(newEle)追加到指定元素(oldEle)的前面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertBefore</span></span>(<span class="keyword">new</span><span class="type">Ele</span>, oldEle) &#123;</span><br><span class="line">    oldEle.parentNode.insertBefore(<span class="keyword">new</span><span class="type">Ele</span>, oldEle);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;insertAfter:把新元素(newEle)追加到指定元素(oldEle)的后面</span></span><br><span class="line"><span class="comment">//-&gt;相当于追加到oldEle弟弟元素的前面,如果弟弟不存在,也就是当前元素已经是最后一个了,我们把新的元素放在最末尾即可</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span></span>(<span class="keyword">new</span><span class="type">Ele</span>, oldEle) &#123;</span><br><span class="line">    <span class="keyword">var</span> nex = <span class="built_in">this</span>.next(oldEle);</span><br><span class="line">    <span class="keyword">if</span> (nex) &#123;</span><br><span class="line">        oldEle.parentNode.insertBefore(<span class="keyword">new</span><span class="type">Ele</span>, nex);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    oldEle.parentNode.appendChild(<span class="keyword">new</span><span class="type">Ele</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取类名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-&gt;hasClass:验证当前元素中是否包含className这个样式类名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasClass</span>(<span class="params">curEle, className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| +)"</span> + className + <span class="string">"( +|$)"</span>);</span><br><span class="line">    <span class="keyword">return</span> reg.test(curEle.className);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;addClass:给元素增加样式类名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">curEle, className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ary = className.replace(<span class="regexp">/(^ +| +$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/ +/g</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> curName = ary[i];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(curEle, curName)) &#123;</span><br><span class="line">            curEle.className += <span class="string">" "</span> + curName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;removeClass:给元素移除样式类名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeClass</span>(<span class="params">curEle, className</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ary = className.replace(<span class="regexp">/(^ +| +$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/ +/g</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = ary.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> curName = ary[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.hasClass(curEle, curName)) &#123;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| +)"</span> + curName + <span class="string">"( +|$)"</span>, <span class="string">"g"</span>);</span><br><span class="line">            curEle.className = curEle.className.replace(reg, <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;getElementsByClass:通过元素的样式类名获取一组元素集合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClass</span>(<span class="params">strClass, context</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">document</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.listToArray(context.getElementsByClassName(strClass));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//-&gt;IE6~8</span></span><br><span class="line">    <span class="keyword">var</span> ary = [], strClassAry = strClass.replace(<span class="regexp">/(^ +| +$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/ +/g</span>);</span><br><span class="line">    <span class="keyword">var</span> nodeList = context.getElementsByTagName(<span class="string">"*"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nodeList.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> curNode = nodeList[i];</span><br><span class="line">        <span class="keyword">var</span> isOk = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; strClassAry.length; k++) &#123;</span><br><span class="line">            <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| +)"</span> + strClassAry[k] + <span class="string">"( +|$)"</span>);</span><br><span class="line">            <span class="keyword">if</span> (!reg.test(curNode.className)) &#123;</span><br><span class="line">                isOk = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isOk) &#123;</span><br><span class="line">            ary[ary.length] = curNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>操作CSS</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//-&gt;getCss:获取元素的样式值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCss</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = <span class="literal">null</span>, reg = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        val = <span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>, <span class="literal">null</span>)[attr];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">"opacity"</span>) &#123;</span><br><span class="line">            val = <span class="keyword">this</span>.currentStyle[<span class="string">"filter"</span>];</span><br><span class="line">            reg = <span class="regexp">/^alpha\(opacity=(\d+(?:\.\d+)?)\)$/</span>;</span><br><span class="line">            val = reg.test(val) ? reg.exec(val)[<span class="number">1</span>] / <span class="number">100</span> : <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            val = <span class="keyword">this</span>.currentStyle[attr];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reg = <span class="regexp">/^(-?\d+(\.\d+)?)(px|pt|em|rem)?$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(val) ? <span class="built_in">parseFloat</span>(val) : val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;setCss:给当前元素的某一个样式属性设置值(增加在行内样式上的)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCss</span>(<span class="params">attr, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (attr === <span class="string">"float"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">"style"</span>][<span class="string">"cssFloat"</span>] = value;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">"style"</span>][<span class="string">"styleFloat"</span>] = value;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (attr === <span class="string">"opacity"</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">"style"</span>][<span class="string">"opacity"</span>] = value;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">"style"</span>][<span class="string">"filter"</span>] = <span class="string">"alpha(opacity="</span> + value * <span class="number">100</span> + <span class="string">")"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^(width|height|top|bottom|left|right|((margin|padding)(Top|Bottom|Left|Right)?))$/</span>;</span><br><span class="line">    <span class="keyword">if</span> (reg.test(attr)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(value)) &#123;</span><br><span class="line">            value += <span class="string">"px"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>[<span class="string">"style"</span>][attr] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;setGroupCss:给当前元素批量的设置样式属性值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setGroupCss</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> options) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.hasOwnProperty(key)) &#123;</span><br><span class="line">            setCss.call(<span class="keyword">this</span>, key, options[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-&gt;css:此方法实现了获取、单独设置、批量设置元素的样式值</span></span><br><span class="line"><span class="comment">//css(ele,'width',200)</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第2个参数值是一个字符串, 这样的话很有可能就是在获取样式;</span></span><br><span class="line"><span class="comment">为什么说是很有可能呢 ? 因为还需要判断是否存在第三个参数, 如果第三个参数存在的话, 不是获取了, 而是在单独的设置样式属性值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css</span>(<span class="params">curEle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> argTwo = <span class="built_in">arguments</span>[<span class="number">1</span>], ary = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> argTwo === <span class="string">"string"</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">2</span>] === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getCss.apply(curEle, ary);</span><br><span class="line">        &#125;</span><br><span class="line">        setCss.apply(curEle, ary);</span><br><span class="line">    &#125;</span><br><span class="line">    argTwo = argTwo || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (argTwo.toString() === <span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">        setGroupCss.apply(curEle, ary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>通过模仿模仿jq的一些写法可以学到原生js，和编程思想。比如 <strong>惰性思想</strong> </p><ul><li>提前处理好兼容，以后不需要再检测是否兼容：在函数一开始判断<code>flag=window.getComputedStyle</code></li><li>使用单例模式进行封装，方便维护</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用原生-js-实现-模仿-常用的-jq-的一些-api-获取-DOM-节点，以及操作-DOM-，并封装成一个工具库util-js&quot;&gt;&lt;a href=&quot;#用原生-js-实现-模仿-常用的-jq-的一些-api-获取-DOM-节点，以及操作-DOM-，并封装成一个工具库util-js&quot; class=&quot;headerlink&quot; title=&quot;用原生 js 实现(模仿)常用的 jq 的一些 api(获取 DOM 节点，以及操作 DOM)，并封装成一个工具库util.js&quot;&gt;&lt;/a&gt;用原生 js 实现(模仿)常用的 jq 的一些 api(获取 DOM 节点，以及操作 DOM)，并封装成一个工具库&lt;code&gt;util.js&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本工具库用的都是 es5 的语法（考虑到兼容性）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先用一个自执行函数包裹，防止变量污染，再把方法名暴露出去&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; utils=(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//处理IE兼容问题&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; flag=&#39;getComputedStyle&#39; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//因为IE9以上的浏览器才兼容getComputedStyle()方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  do something...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;  */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//-&amp;gt;把外界需要使用的方法暴露给utils&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;win&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;win&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//操作浏览器的盒子模型信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        offset: offset,&lt;span class=&quot;comment&quot;&gt;//获取页面中任意元素距离BODY的偏移&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listToArray: listToArray,&lt;span class=&quot;comment&quot;&gt;//把类数组集合转换为数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        children: children,&lt;span class=&quot;comment&quot;&gt;//获取所有的元素子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prev: prev,&lt;span class=&quot;comment&quot;&gt;//获取上一个哥哥元素节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next: next,&lt;span class=&quot;comment&quot;&gt;//获取下一个弟弟元素节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prevAll: prevAll,&lt;span class=&quot;comment&quot;&gt;//获取所有哥哥节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nextAll: nextAll,&lt;span class=&quot;comment&quot;&gt;//获取所有弟弟节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sibling: sibling,&lt;span class=&quot;comment&quot;&gt;//获取相邻的两个元素节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        siblings: siblings,&lt;span class=&quot;comment&quot;&gt;//获取所有的兄弟元素节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index: index,&lt;span class=&quot;comment&quot;&gt;//获取当前元素的索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        firstChild: firstChild,&lt;span class=&quot;comment&quot;&gt;//获取第一个元素子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        lastChild: lastChild,&lt;span class=&quot;comment&quot;&gt;//获取最后一个元素子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;append&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;append&lt;/span&gt;,&lt;span class=&quot;comment&quot;&gt;//向指定容器的末尾追加元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prepend: prepend,&lt;span class=&quot;comment&quot;&gt;//向指定容器的开头追加元素&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insertBefore: insertBefore,&lt;span class=&quot;comment&quot;&gt;//把新元素(newEle)追加到指定元素(oldEle)的前面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        insertAfter: insertAfter,&lt;span class=&quot;comment&quot;&gt;//把新元素(newEle)追加到指定元素(oldEle)的后面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        hasClass: hasClass,&lt;span class=&quot;comment&quot;&gt;//验证当前元素中是否包含className这个样式类名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        addClass: addClass,&lt;span class=&quot;comment&quot;&gt;//给元素增加样式类名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        removeClass: removeClass,&lt;span class=&quot;comment&quot;&gt;//给元素移除样式类名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getElementsByClass: getElementsByClass,&lt;span class=&quot;comment&quot;&gt;//通过元素的样式类名获取一组元素集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        getCss:getCss,&lt;span class=&quot;comment&quot;&gt;//获取元素的样式值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        css: css&lt;span class=&quot;comment&quot;&gt;//此方法实现了获取、单独设置、批量设置元素的样式值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>原型链</title>
    <link href="http://yoursite.com/2020/03/16/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://yoursite.com/2020/03/16/%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2020-03-16T01:45:34.906Z</published>
    <updated>2019-08-07T09:10:31.885Z</updated>
    
    <content type="html"><![CDATA[<p><strong>工厂模式</strong></p><ul><li><strong>单例模式</strong>虽然解决了分组的作用，但不能实现批量的生产</li><li><strong>工厂模式</strong>把实现同一间事情的相同代码放到一个函数中，以后如果再想实现这个功能，不需要重新编写这些代码,只需要执行当前的函数即可，也叫–&gt;“函数的封装” -减少页面中的冗余代码，提高代码的重复利用率–&gt;<strong>低耦合高内聚</strong> -<strong>面向对象</strong>：函数的封装，继承（子类继承父类的方法和属性等,祖传），多态:包括重载和重写，js 中只有重写，但是却可以模拟重载.</li><li>js 中有一个操作类似重载但不是重载的，我们可以根据传递参数的不同，实现不同的功能</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sun</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> num === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">100</span>);</span><br><span class="line">sum();</span><br></pre></td></tr></table></figure><p>构造函数模式和工厂模式的区别：</p><ul><li>执行的时候 -普通函数执行：createJsPerson() -构造函数模式：new CreateJsPerson() 通过 new 执行后，我们的 CreateJsPerson 就是一个类了，而函数执行的返回值(p1)就是 CreateJsPerson 这个类的一个实例<strong>–&gt;JS 中所有的类都是函数数据类型的，通过 new 执行变成了一个类，但是它本身是一个普通的函数 -&gt;JS 中所有实例都是对象数据类型的</strong></li><li>在函数代码执行的时候 -相同点：都是形成一个私有的作用域，然后 形参赋值-&gt;预解释-&gt;代码重上到下执行 -不同点：<br>-&gt;在代码执行之前，不同自己手动创建一个 obj 对象，浏览器会默认返回一个对象类型的值(这个对象其实就是我们当前类的一个实例)<br>-&gt;接下来代码开始从上到下执行，以当前的实例为执行的主体（this 代表的就是当前的实例），然后分别把属性名和属性值赋值给当前的实例<br>-&gt;最后浏览器会默认把创建的实例返回<br><strong>–&gt;JS 中所有的类都是函数数据类型的，通过 new 执行变成了一个类，但是它本身是一个普通的函数 **<br>**-&gt;JS 中所有实例都是对象数据类型的</strong><br><strong>-&gt;p1 和 p2 都是 CreateJsPerson 这个类的实例，所以都拥有 writeJs 这个方法，但是不同实例之间的方法是不一样的。在类中给的实例增加的属性（this.xxx = xxx）属于当前实例的私有的实行，实例和实例之间是单独的个体，所以私有的属性之间是不相等的</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//console.log(p1.writeJs === p2.writeJs)//false</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// window</span></span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">100</span>; <span class="comment">//-&gt;f1.x = 100</span></span><br><span class="line">  <span class="keyword">this</span>.getX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Fn();</span><br><span class="line">consloe.log(f1.num); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>this 的问题：在类中出现的 this.xxx=xxx 中的 this 都是当前类的实例，而某一个属性值（方法），方法中的 this 需要看方法执行的时候，前面是否有“ . ”才能知道 this 是谁</li><li>类有普通函数的一面，当函数执行的时候，var num 其实只是当前形式的私有作用域中的私有变量而已，它和我们的 f1 这个实例没有任何关系，只有 this.xxx=xxx 才相当于给 f1 这个实例增加私有的属性值 #原型模式</li><li>每一个函数数据类型（普通函数、类）都有一个天生自带的属性：prototype（原型），并且这个属性是一个对象数据类型的值，所以会默认开一个堆内存！</li><li>并且在 prototype 上浏览器天生给它加了一个属性 constructor（构造函数），属性值是当前函数（类）的本身</li><li>每一个对象数据类型（普通的对象、数组、正则、 实例、prototype . . .）也天生自带一个属性：<strong>proto</strong>,属性值是当前实例所属类的原型（prototype）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.getX = funtion()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f1=<span class="keyword">new</span> Fn;</span><br><span class="line"><span class="keyword">var</span> f2=<span class="keyword">new</span> Fn;</span><br><span class="line"><span class="built_in">console</span>.log(Fn.prototype.constructor === Fn);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>不管 f1 instanceof Object -&gt;true 因为 f1 通过<strong>proto</strong>可以向上级查找，不管有多少级，最后总能找到 Object</li><li>在 Object 原型上没有<strong>proto</strong>这个属性（因为 Object 是最顶层）<br><strong>原型链模型</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f1.hasOwnProperty(<span class="string">'x'</span>); <span class="comment">//hasOwnProperty是f1的一个属性</span></span><br></pre></td></tr></table></figure><p>然而 f1 的私有属性上并没有这个方法，因此</p><ul><li>通过对象名.属性名 的方式获取是性质的时候，首先在对象的私有属性上进行查找，如果有这个属性，则获取的是私有的属性值；</li><li>如果私有的没有，则通过<strong>proto</strong>找到所属类的原型（类的原型上定义的属性和方法都是当前实例公有的属性和方法，原型上存在的话，获取的是公有的属性值）。<strong>如果原型上也没有，则继续通过原型的</strong>proto<strong>继续向上查找，一直找到 Object.prototype 为止</strong> #解题步骤：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">this</span>.y = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">this</span>.getY = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype = &#123;</span><br><span class="line"><span class="keyword">constructor</span>: Fn,//要指向Fn这个函数，不然会指向到原型（object）中</span><br><span class="line">y:30;,</span><br><span class="line">getX : function()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;,</span><br><span class="line">getY : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn;</span><br><span class="line"></span><br><span class="line">f.getX();  <span class="comment">//-&gt;console.log(f.x)-&gt;10;</span></span><br><span class="line">f.__proto__.getX(); <span class="comment">//-&gt;this是f.__proto__.-&gt;console.log(f.__proto__.x)-&gt;undefined</span></span><br><span class="line">Fn.prototype.getX() <span class="comment">//undefined</span></span><br><span class="line">f.getY() <span class="comment">//  console.log(f.y)-&gt;20;</span></span><br><span class="line">f.__proto__.getY();<span class="comment">//30</span></span><br></pre></td></tr></table></figure><p><strong>在原型模式中，this 常用的两种情况：</strong></p><ul><li>在类中 this.xxx=xxx; this-&gt;当前类的实例</li><li>某一个方法中的 this -&gt; 看执行的时候<strong>“ . “</strong>前面的是谁 this 就是谁<br><strong>思路步骤</strong></li><li><strong>需要先确定 this 的指向（this 是谁）</strong></li><li><strong>把 this 替换成对应的代码</strong></li><li><strong>按照原型链查找的机制，一步步的查找结果</strong></li></ul><p><strong>在内置类的原型上扩展我们的方法</strong><br>数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> cur = <span class="keyword">this</span>[i]; <span class="comment">//获得当前项</span></span><br><span class="line">    <span class="keyword">if</span> (obj[cur] == cur) &#123;</span><br><span class="line">      <span class="comment">//判断是否重复</span></span><br><span class="line">      <span class="keyword">this</span>[i] = <span class="keyword">this</span>[<span class="keyword">this</span>.length - <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">this</span>.length--;</span><br><span class="line">      i--;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    obj[cur] = cur;</span><br><span class="line">  &#125;</span><br><span class="line">  obj = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">14</span>, <span class="number">11</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">12</span>, <span class="number">43</span>, <span class="number">11</span>];</span><br><span class="line">ary.myUnique();</span><br><span class="line"><span class="built_in">console</span>.log(ary);</span><br></pre></td></tr></table></figure><p><strong>链式写法：</strong>执行完成数组的一个方法可以紧接着执行下一个方法</p><ul><li><strong>原理：</strong>ary 为什么可以使用 sort 方法？因为 sort 是 Array.prototype 上的公有的方法，而数组 ary 是 Array 这个类的一个实例，所以 ary 可以使用 sort 方法-&gt;数组才能使用我们 Array 原型上定义的属性和方法</li><li></li></ul><p><strong>sort 执行完成的返回值是一个排序后的“数组”，而 pop 执行完成后返回的是删除的元素，不是一个数组，所以不能再 pop 后面再添加</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [<span class="number">12</span>, <span class="number">15</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">22</span>];</span><br><span class="line">ary</span><br><span class="line">  .sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;)</span><br><span class="line">  .revarse()</span><br><span class="line">  .pop();</span><br></pre></td></tr></table></figure><p><strong>批量设置公有属性</strong></p><ul><li>只有浏览器天生给 Fn.prototype 开辟的堆内存里面有 constructior，而我们自己开辟的这个堆内存没有这个属性，这样 constructor 指向就不是 Fn，而是 Object。 -因此为了保持和原来的一致，我们需要手动增加 constructior 指向</li><li>重构原型对象的方式-&gt;自己开辟一个堆内存，存储我们公有的属性和方法，把浏览器原来的 Fn.prototype 开辟的那个替换掉</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype = &#123;</span><br><span class="line"><span class="keyword">constructor</span> = Fn,</span><br><span class="line">a : function ()&#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">b : <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn;</span><br></pre></td></tr></table></figure><p><strong>原型链模式的继承方式</strong></p><ul><li><strong>原型继承：</strong> 是我们 JS 中最常用的一种继承方式，-&gt;子类 B 想要继承父类 A 中的所有的属性和方法（私有的和公有的），只需让<strong>B.prototype = new A；</strong>就可以 -<strong>注意：</strong>它是把父类中私有的+共有的都继承到了子类的原型上（子类公有的） -<strong>核心：</strong>原型继承并不是把父类中的属性和方法克隆一模一样的给 B，而是让 B 和 A 之间增加了原型链的连接，以后 B 的实例 n 想要 A 中的 getX 方法，需要一级级的向上查找来使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.X = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getX = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单例模式&lt;/strong&gt;虽然解决了分组的作用，但不能实现批量的生产&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;工厂模式&lt;/strong&gt;把实现同一间事情的相同代码放到一个函数中，以后如果再想实现这个功能，不需要重新编写这些代码,只需要执行当前的函数即可，也叫–&amp;gt;“函数的封装” -减少页面中的冗余代码，提高代码的重复利用率–&amp;gt;&lt;strong&gt;低耦合高内聚&lt;/strong&gt; -&lt;strong&gt;面向对象&lt;/strong&gt;：函数的封装，继承（子类继承父类的方法和属性等,祖传），多态:包括重载和重写，js 中只有重写，但是却可以模拟重载.&lt;/li&gt;
&lt;li&gt;js 中有一个操作类似重载但不是重载的，我们可以根据传递参数的不同，实现不同的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sun&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; num === &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sum();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;构造函数模式和工厂模式的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行的时候 -普通函数执行：createJsPerson() -构造函数模式：new CreateJsPerson() 通过 new 执行后，我们的 CreateJsPerson 就是一个类了，而函数执行的返回值(p1)就是 CreateJsPerson 这个类的一个实例&lt;strong&gt;–&amp;gt;JS 中所有的类都是函数数据类型的，通过 new 执行变成了一个类，但是它本身是一个普通的函数 -&amp;gt;JS 中所有实例都是对象数据类型的&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在函数代码执行的时候 -相同点：都是形成一个私有的作用域，然后 形参赋值-&amp;gt;预解释-&amp;gt;代码重上到下执行 -不同点：&lt;br&gt;-&amp;gt;在代码执行之前，不同自己手动创建一个 obj 对象，浏览器会默认返回一个对象类型的值(这个对象其实就是我们当前类的一个实例)&lt;br&gt;-&amp;gt;接下来代码开始从上到下执行，以当前的实例为执行的主体（this 代表的就是当前的实例），然后分别把属性名和属性值赋值给当前的实例&lt;br&gt;-&amp;gt;最后浏览器会默认把创建的实例返回&lt;br&gt;&lt;strong&gt;–&amp;gt;JS 中所有的类都是函数数据类型的，通过 new 执行变成了一个类，但是它本身是一个普通的函数 **&lt;br&gt;**-&amp;gt;JS 中所有实例都是对象数据类型的&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;-&amp;gt;p1 和 p2 都是 CreateJsPerson 这个类的实例，所以都拥有 writeJs 这个方法，但是不同实例之间的方法是不一样的。在类中给的实例增加的属性（this.xxx = xxx）属于当前实例的私有的实行，实例和实例之间是单独的个体，所以私有的属性之间是不相等的&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//console.log(p1.writeJs === p2.writeJs)//false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fn&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// window&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//-&amp;gt;f1.x = 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.getX = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; f1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Fn();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;consloe.log(f1.num); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="原型链" scheme="http://yoursite.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://yoursite.com/2020/03/16/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2020/03/16/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</id>
    <published>2020-03-16T01:45:34.894Z</published>
    <updated>2019-11-12T06:02:46.527Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>作用域</title>
    <link href="http://yoursite.com/2020/03/16/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2020/03/16/%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2020-03-16T01:45:34.879Z</published>
    <updated>2019-08-07T09:11:49.007Z</updated>
    
    <content type="html"><![CDATA[<p><strong>基本数据类型的引入和引入数据类型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> &lt;style&gt;</span><br><span class="line">        .div1&#123;</span><br><span class="line">            width: <span class="number">100</span>px;</span><br><span class="line">            height: <span class="number">100</span>px;</span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;div id="div1" class="div1"&gt;</span></span><br><span class="line"><span class="regexp">        haha</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">'div1'</span>);</span><br><span class="line">        <span class="keyword">var</span> color = oDiv.style.backgroundColor;  <span class="comment">//var color = 'red'</span></span><br><span class="line">        <span class="comment">//var oStyle = oDiv.style; //</span></span><br><span class="line">        <span class="built_in">console</span>.dir(oDiv)</span><br><span class="line">        oDiv.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//oDiv.style.backgroundColor = 'black';</span></span><br><span class="line">            <span class="comment">//color = 'black';</span></span><br><span class="line">            oStyle.backgroundColor = <span class="string">'black'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>#作用域的深入</p><ul><li><strong>预解释</strong> ：</li><li>当浏览器开始解析 js 代码的时候，首先看当前运行环境(作用域)内带 var 和 function，带 var 的变量会提前声明(预解释)但是不会赋值，带 function 的会提前声明并赋值。带 var 变量提前声明的时候并不会被赋值，但是有一个默认的 undefined 值。当代码执行过后才会赋值。<br>堆栈内存： 栈内存【全局作用域和私有作用域】（提供一个让 js 代码执行的环境），<br>堆内存：【存储空间】所有的引用数据类型，需要存储的内容都在堆内存中（对象存储键值对；函数存储代码字符串）<strong>保存的是一个地址</strong><br>预解释只看等号左面的变量，并不会看你的值是什么<br>我们的预解释只发生在当前作用域</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num);<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>; <span class="comment">//赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">//12</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="string">'name'</span>: <span class="string">'tianxi'</span>, <span class="attr">age</span>: <span class="number">30</span>&#125;; <span class="comment">//对象类型</span></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="built_in">console</span>.log(haha); <span class="comment">//报错 Uncaught ReferenceError: haha is not defined</span></span><br><span class="line"><span class="comment">/*-----------------------------------------------------*/</span></span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">预解释只看等号左面的变量，并不会看你的值是什么</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123; <span class="comment">//当代码执行到这的时候，声明和赋值都已经结束，直接跳过</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">haha</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;; <span class="comment">//我们的预解释只发生在当前作用域</span></span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    total = num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>在全局作用域下，加 var 和不加 var 的区别 1 是否被提前声明 2 不加 var 那么就是一个赋值过程，相当于给 window 添加了一个属性并且赋值</p><p>预解释的时候<br>1 无论条件是否成立，都会预解释</p><p> console.log(total); //undefined<br>if(‘total’ in window){<br>var total = 6;<br>}<br>console.log(total); //6,undefined.</p><p>2 预解释的时候带 var 关键字之看等号左面</p><pre><code> //a();var a = function (){     alert();       }</code></pre><p>3 自执行函数不被预解释</p><pre><code>!function (){    var b = 0;}()</code></pre><p>4 return 下面的代码仍然会被预解释,但是 return 后面的值即使你是一个函数也不会被预解释</p><pre><code> function fn(){console.log(num); //??undefinedreturn function (){    console.log(num);}var num = 9;//return 下面的代码不执行，但是还会声明提前  }  fn();</code></pre><p>5.预解释是一种无节操的机制</p><ul><li><strong>预解释的时候无论你的条件是否成立，都要把里面的 var 提前声明 -&gt;window.var</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">                 <span class="keyword">if</span>(!<span class="string">"num"</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">                 <span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(num);<span class="comment">//-&gt;undefined</span></span><br><span class="line">           <span class="comment">//--------------------------------------------------------------------------</span></span><br><span class="line">           fn() ;  <span class="comment">//Uncaught TypeError: fn is not a function  把fn声明提前了</span></span><br><span class="line">          <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       fn();<span class="comment">//推荐使用这种匿名函数之构建函数-》找bug好找，只需要往下面找就行</span></span><br><span class="line">       <span class="comment">/*---------------------------------------*/</span></span><br><span class="line">       fn() ;  <span class="comment">//12       把fn整个函数都提前并且执行</span></span><br><span class="line">          fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//练习</span></span><br><span class="line">    <span class="comment">//window预解释：</span></span><br><span class="line">    <span class="comment">//1、声明加定义fn=000fff111；</span></span><br><span class="line">    <span class="comment">//2、变量提升 var = fn；</span></span><br><span class="line">    <span class="comment">//3、声明（已经声明就不重复操作，只赋值）加定义 fn=000fff222；</span></span><br><span class="line">    <span class="comment">//4、所以最后fn=000fff222；</span></span><br><span class="line">    <span class="comment">//5、只要前面有提示错误，下面就不继续执行</span></span><br><span class="line">     fn();<span class="comment">//-&gt;2</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);  <span class="comment">//虽然重复，但是提前，并且已经做过一遍</span></span><br><span class="line">    &#125;</span><br><span class="line">    fn();<span class="comment">//-&gt;2</span></span><br><span class="line">    <span class="keyword">var</span> fn = <span class="number">12</span>                 <span class="comment">//代码执行到这的时候，我们原来的函数引用地址已经被破坏，并且把n赋值为12，</span></span><br><span class="line">    fn();                        <span class="comment">//=》10   前面已经有一个fn，不是函数所以报fn is not function</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">    <span class="comment">//结果：  2 2 error</span></span><br><span class="line">**如何查找上级作用域**</span><br><span class="line">   函数运行运行时候上一级作用域只和在哪里定义有关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="comment">// var x = 13;</span></span><br><span class="line">            <span class="built_in">console</span>.log(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> f = fn(); <span class="comment">//100  x的值才会预解释</span></span><br><span class="line">    f(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><strong>作用域销毁与内存释放</strong></p><ul><li><strong>堆内存 :</strong>对象数据类型或者函数数据类型在定义的时候首先会开辟一个新的栈空间（引用的地址），如果外面有变量知道了这个地址，我们就说这个内存被占用。<br>我们想要让内存释放，只需要把她的变量赋值为 null，若当前的栈内存没有任何东西被应用，就会被浏览器销毁</li><li><strong>栈内存 :</strong> 1.全局作用域：当页面关闭时就会销毁<br><strong>2.私有作用域</strong></li><li>一般情况下，当私有作用域执行完之后，就会主动进行销毁</li><li><strong>特殊情况，</strong>若私有作用域里面还有其他东西被引用，那么这个作用域执行后不会被销毁，-&gt;里面的私有变量也不会被销毁</li><li>以下情况属于不立即销毁，fn 返回的函数没有被其他的东西占用，但是还要执行一次，所以暂时不销毁</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">fn()();  <span class="comment">//首先执行一次fn，返回一个小函数对应的地址，然后紧接着让返回的小函数再执行。</span></span><br><span class="line"><span class="comment">//例子：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(n + (++i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f(<span class="number">10</span>); <span class="comment">//-&gt;21</span></span><br><span class="line">f(<span class="number">20</span>); <span class="comment">//-&gt;32</span></span><br><span class="line">f()(<span class="number">10</span>); <span class="comment">//-&gt;21</span></span><br><span class="line">f()(<span class="number">20</span>);  <span class="comment">//-&gt;31</span></span><br></pre></td></tr></table></figure><p>#this 关键字</p><ul><li><p><strong>函数执行，首先看函数名前面是否有“.”，有的话，”.”前面是谁 this 就是谁，没有就是 window</strong></p></li><li><p><strong>自执行函数中的 this 永远是 window</strong></p></li><li><p><strong>给元素的某一个时间绑定方法，当时间触发的时候，执行对应的方法，方法中的 this 就是当前的元素</strong></p></li><li><p><strong>在构造函数模式中，类中（函数体中）出现的 this.xxx = xxx 中的 this 是当前类中的实例</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;基本数据类型的引入和引入数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &amp;lt;style&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .div1&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            width: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            height: &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;px;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            background: red;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/style&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    &amp;lt;body&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    &amp;lt;div id=&quot;div1&quot; class=&quot;div1&quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;        haha&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    &amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; oDiv = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;div1&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color = oDiv.style.backgroundColor;  &lt;span class=&quot;comment&quot;&gt;//var color = &#39;red&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//var oStyle = oDiv.style; //&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.dir(oDiv)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        oDiv.onclick = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//oDiv.style.backgroundColor = &#39;black&#39;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;//color = &#39;black&#39;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            oStyle.backgroundColor = &lt;span class=&quot;string&quot;&gt;&#39;black&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;lt;/&lt;/span&gt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;#作用域的深入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;预解释&lt;/strong&gt; ：&lt;/li&gt;
&lt;li&gt;当浏览器开始解析 js 代码的时候，首先看当前运行环境(作用域)内带 var 和 function，带 var 的变量会提前声明(预解释)但是不会赋值，带 function 的会提前声明并赋值。带 var 变量提前声明的时候并不会被赋值，但是有一个默认的 undefined 值。当代码执行过后才会赋值。&lt;br&gt;堆栈内存： 栈内存【全局作用域和私有作用域】（提供一个让 js 代码执行的环境），&lt;br&gt;堆内存：【存储空间】所有的引用数据类型，需要存储的内容都在堆内存中（对象存储键值对；函数存储代码字符串）&lt;strong&gt;保存的是一个地址&lt;/strong&gt;&lt;br&gt;预解释只看等号左面的变量，并不会看你的值是什么&lt;br&gt;我们的预解释只发生在当前作用域&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//赋值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(num); &lt;span class=&quot;comment&quot;&gt;//12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;tianxi&#39;&lt;/span&gt;, &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//对象类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(obj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(haha); &lt;span class=&quot;comment&quot;&gt;//报错 Uncaught ReferenceError: haha is not defined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*-----------------------------------------------------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a)&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;预解释只看等号左面的变量，并不会看你的值是什么&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;num1, num2&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;//当代码执行到这的时候，声明和赋值都已经结束，直接跳过&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;haha&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;; &lt;span class=&quot;comment&quot;&gt;//我们的预解释只发生在当前作用域&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; total = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    total = num1 + num2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="作用域" scheme="http://yoursite.com/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>从输入URL到页面加载完成的过程中都发生了什么</title>
    <link href="http://yoursite.com/2020/03/16/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://yoursite.com/2020/03/16/%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</id>
    <published>2020-03-16T01:45:34.870Z</published>
    <updated>2020-03-10T06:20:40.455Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Vue的虚拟dom以及dom-diff</title>
    <link href="http://yoursite.com/2020/03/16/Vue%E7%9A%84%E8%99%9A%E6%8B%9Fdom%E5%92%8Cdom-diff/"/>
    <id>http://yoursite.com/2020/03/16/Vue%E7%9A%84%E8%99%9A%E6%8B%9Fdom%E5%92%8Cdom-diff/</id>
    <published>2020-03-16T01:45:34.859Z</published>
    <updated>2019-11-07T07:51:45.428Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Vue源码解析①</title>
    <link href="http://yoursite.com/2020/03/16/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/16/Vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2020-03-16T01:45:34.844Z</published>
    <updated>2019-11-07T12:57:30.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在开始之前-阅读源码你需要有扎实的基本功-还要有耐心-能把握全局-不要扣细节"><a href="#在开始之前-阅读源码你需要有扎实的基本功-还要有耐心-能把握全局-不要扣细节" class="headerlink" title="在开始之前,阅读源码你需要有扎实的基本功,还要有耐心,能把握全局,不要扣细节!"></a>在开始之前,阅读源码你需要有扎实的基本功,还要有耐心,能把握全局,不要扣细节!</h1><h1 id="1、先看文件目录"><a href="#1、先看文件目录" class="headerlink" title="1、先看文件目录"></a>1、先看文件目录</h1><h1 id="先找到入口"><a href="#先找到入口" class="headerlink" title="先找到入口"></a>先找到入口</h1><blockquote><p>使用的时候都先要<code>import Vue from &#39;vue&#39;</code><br>先看<code>package.json</code>中，打包之后的文件<br><code>build</code>这条脚本是打包<code>node scripts/build.js</code> ，那么我们找到这个文件<br><img src="https://i.loli.net/2019/11/07/FTAlg8Z7Crkyct3.png" alt="20191107103759.png"></p></blockquote><blockquote><p>先不理函数里面的东西，可以看到执行的是<code>build()</code>这个方法，然后传入了<code>builds</code>这个配置参数，接下来去<code>/config.js</code>找到<code>getAllBuilds</code></p></blockquote><p><img src="https://i.loli.net/2019/11/07/xIDRFvMS5Q8cn3P.png" alt="20191107104123.png"></p><blockquote><p><code>getAllBuilds</code>就是map了一下<code>builds</code>，然后再<code>builds</code>里面找到有<code>+compiler</code>的构建配置 <code>web-full-esm</code></p></blockquote><blockquote><p>什么是<code>compiler</code></p><ul><li>vue执行的过程，先把template解析成render函数</li><li>render返回虚拟dom</li><li>从template转成render这一步就是compiler，可以在webpack中搞定</li></ul></blockquote><blockquote><p>接下来进入<code>web-full-esm</code>的入口<code>web/entry-runtime-with-compiler.js</code></p></blockquote><blockquote><p>这个文件终于看到导出了<code>Vue</code>，同时还修正了一下<code>$mount</code></p></blockquote><blockquote><p>但是也在<code>./runtime/index</code>中引入了<code>Vue</code>，接下来就是看<code>runtime/index.js</code></p></blockquote><blockquote><p><code>runtime/index</code><br><img src="https://i.loli.net/2019/11/07/tpz7vObxWBcZnh4.png" alt="20191107112141.png"></p></blockquote><blockquote><p>又在<code>core/index</code>引入了vue</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'./instance/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; initGlobalAPI &#125; <span class="keyword">from</span> <span class="string">'./global-api/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isServerRendering &#125; <span class="keyword">from</span> <span class="string">'core/util/env'</span></span><br><span class="line"><span class="keyword">import</span> &#123; FunctionalRenderContext &#125; <span class="keyword">from</span> <span class="string">'core/vdom/create-functional-component'</span></span><br><span class="line"><span class="comment">// 全局API</span></span><br><span class="line">initGlobalAPI(Vue)</span><br><span class="line"><span class="comment">// 删除了一些干扰的代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><blockquote><p><code>instance/index</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">'./init'</span></span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">'./state'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">'./render'</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">'./events'</span></span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">'./lifecycle'</span></span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 终于找到了定义的地方</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行init函数</span></span><br><span class="line">  <span class="keyword">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5个扩展函数</span></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>大概的流程已经捋顺了，现在看5个扩展的函数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在开始之前-阅读源码你需要有扎实的基本功-还要有耐心-能把握全局-不要扣细节&quot;&gt;&lt;a href=&quot;#在开始之前-阅读源码你需要有扎实的基本功-还要有耐心-能把握全局-不要扣细节&quot; class=&quot;headerlink&quot; title=&quot;在开始之前,阅读源码你需要有扎实
      
    
    </summary>
    
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础篇(其他指令、生命周期)</title>
    <link href="http://yoursite.com/2020/03/16/VUE%E5%9F%BA%E7%A1%80%E7%AF%87(%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F)/"/>
    <id>http://yoursite.com/2020/03/16/VUE%E5%9F%BA%E7%A1%80%E7%AF%87(%E5%85%B6%E4%BB%96%E6%8C%87%E4%BB%A4%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F)/</id>
    <published>2020-03-16T01:45:34.825Z</published>
    <updated>2019-08-13T09:42:06.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v-if-和-v-show"><a href="#v-if-和-v-show" class="headerlink" title="v-if 和 v-show"></a>v-if 和 v-show</h2><blockquote><p>当某个页面的一些 DOM 元素需要隐藏或者加载页面时不渲染的情况（共用同一个 vue 文件，比如：新增和编辑页面）下，这个时候就需要这两个指令</p></blockquote><ul><li>v-if 操作的是 DOM，v-if 可以和 v-else-if，v-else 连用</li><li>v-show 操作的是样式<code>display:none</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--template标签 是vue提供给我们的没有任何的实际意义，用来包裹元素用的，v-show不支持template,只有v-if使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="comment">&lt;!--当if成立，下面的就不执行--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我很帅<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我很帅<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我很帅<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我很帅<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>我非常帅<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当你使用v-show时，元素会多加一个样式display:none --&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>既然使用场景差不多，那么哪种情况分别用哪个指令（两者的区别） <strong>（基础面试有时会问到）</strong></p><ul><li>当你需要频繁显示隐藏某个元素时，推荐使用<code>v-show</code>，因为<code>v-if</code>是把元素移除，操作 DOM 的性能开销非常大</li><li>如果一加载页面就判断元素存不存在，推荐用<code>v-if</code></li></ul></blockquote><a id="more"></a><h2 id="computed-计算属性–不是“方法”"><a href="#computed-计算属性–不是“方法”" class="headerlink" title="computed 计算属性–不是“方法”"></a>computed 计算属性–不是“方法”</h2><blockquote><ul><li>方法(methods)不会有缓存，computed 会根据依赖(归 vue 管理的数据，可以响应式变化的)的属性进行缓存</li><li>两部分组成：<code>get</code> 和 <code>set</code>（不能只写<code>get</code>）。一般情况下，通过 js 赋值影响其他表单元素值设置的时候都会调用<code>set</code>方法</li><li>computed 里的函数必须要有<code>return</code>，不然绑定的值是<code>undefined</code>，并且是不支持异步的</li></ul></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    msg() &#123;</span><br><span class="line">      <span class="keyword">const</span> showText = <span class="string">''</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.a.length &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        showText = <span class="string">'少了'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.a.length &gt; <span class="number">6</span>) &#123;</span><br><span class="line">        showText = <span class="string">'多了'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> showText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>上面实现了当输入长度超过 6 个提示 <strong>多了</strong>；少于 3 个提示 <strong>少了</strong></p></blockquote><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><blockquote><ul><li>只有值变化时才会触发，功能跟 computed 类似，同时支持异步，但是操作就繁琐很多</li><li>比如官方文档中的这个例子[<a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7]" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-%E4%BE%A6%E5%90%AC%E5%B1%9E%E6%80%A7]</a></li></ul></blockquote><blockquote><ul><li>可以看出 computed 更简洁</li><li>watch 有两个属性 <code>immediate</code> 和 <code>deep</code>这两个属性，会在后续的 <strong>vue 实战的使用技巧</strong> 说明。</li></ul></blockquote><h2 id="class-和-style"><a href="#class-和-style" class="headerlink" title="class 和 style"></a>class 和 style</h2><blockquote><ul><li>两者用法和功能相似，都是动态绑定样式</li></ul></blockquote><blockquote><ul><li>后面的:class 会覆盖一开始写的 class，因为 vue 是后面加载的</li></ul></blockquote><blockquote><ul><li>有两种方式，对象和数组</li></ul></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"x"</span> :<span class="built_in">class</span>=<span class="string">"&#123;z:flag,y:true&#125;"</span>&gt;我很帅&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"x"</span> :<span class="built_in">class</span>=<span class="string">"[class1,class2,&#123;z:false&#125;]"</span>&gt;我很帅&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><blockquote><p>style 用法一样</p></blockquote><h2 id="vue-的生命周期函数"><a href="#vue-的生命周期函数" class="headerlink" title="vue 的生命周期函数"></a>vue 的生命周期函数</h2><blockquote><p>直接看官方文档的实例图<br><img src="https://i.loli.net/2019/08/13/QkSjTH4W9pqVRJX.png" alt="20190813172106.png"></p></blockquote><p>可以看出一共有 8 个周期</p><ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li><li>beforeUpdate</li><li>updated</li><li>beforeDestroy</li><li>destroyed</li></ul><blockquote><p>下面分别说明每个周期都有什么用和干了什么</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  beforeCreate() &#123;&#125;, <span class="comment">//此方法用不到</span></span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="string">''</span> &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="comment">// 获取ajax，初始化操作</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;&#125;, <span class="comment">//没有什么实际意义</span></span><br><span class="line">  mounted() &#123;&#125;, <span class="comment">// 真实dom渲染完了，可以操作dom了</span></span><br><span class="line">  beforeUpdate() &#123;</span><br><span class="line">    <span class="comment">// 一般用watch来替换掉</span></span><br><span class="line">  &#125;,</span><br><span class="line">  updated() &#123;&#125;,</span><br><span class="line">  beforeDestroy() &#123;</span><br><span class="line">    <span class="comment">// 可以清除定时器 或者清除事件绑定</span></span><br><span class="line">    alert(<span class="string">'销毁前'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    alert(<span class="string">'销毁后'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>每个 Vue 实例在被创建时都要经过一系列的初始化过程，需要设置数据监听、编译模板、将实例挂载到 DOM 并在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，这给了用户在不同阶段添加自己的代码的机会。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;v-if-和-v-show&quot;&gt;&lt;a href=&quot;#v-if-和-v-show&quot; class=&quot;headerlink&quot; title=&quot;v-if 和 v-show&quot;&gt;&lt;/a&gt;v-if 和 v-show&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当某个页面的一些 DOM 元素需要隐藏或者加载页面时不渲染的情况（共用同一个 vue 文件，比如：新增和编辑页面）下，这个时候就需要这两个指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;v-if 操作的是 DOM，v-if 可以和 v-else-if，v-else 连用&lt;/li&gt;
&lt;li&gt;v-show 操作的是样式&lt;code&gt;display:none&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--template标签 是vue提供给我们的没有任何的实际意义，用来包裹元素用的，v-show不支持template,只有v-if使用--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-if&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;  &amp;gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--当if成立，下面的就不执行--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;我很帅&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;我很帅&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;我很帅&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;我很帅&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;template&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-else&lt;/span&gt;&amp;gt;&lt;/span&gt;我非常帅&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 当你使用v-show时，元素会多加一个样式display:none --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;既然使用场景差不多，那么哪种情况分别用哪个指令（两者的区别） &lt;strong&gt;（基础面试有时会问到）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当你需要频繁显示隐藏某个元素时，推荐使用&lt;code&gt;v-show&lt;/code&gt;，因为&lt;code&gt;v-if&lt;/code&gt;是把元素移除，操作 DOM 的性能开销非常大&lt;/li&gt;
&lt;li&gt;如果一加载页面就判断元素存不存在，推荐用&lt;code&gt;v-if&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础篇(v-model、v-for)</title>
    <link href="http://yoursite.com/2020/03/16/VUE%E5%9F%BA%E7%A1%80%E7%AF%87(v-model%E3%80%81v-for)/"/>
    <id>http://yoursite.com/2020/03/16/VUE%E5%9F%BA%E7%A1%80%E7%AF%87(v-model%E3%80%81v-for)/</id>
    <published>2020-03-16T01:45:34.797Z</published>
    <updated>2019-08-13T09:42:24.467Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>说 vue 之前先提几个数组变异方法</p></blockquote><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()<blockquote><p>因为如果你这样<code>arr[1].name=&#39;nihao&#39;</code>这样改变数据，是不会触发 set 方法的</p></blockquote></li></ul><h3 id="常用数组方法的基本用法"><a href="#常用数组方法的基本用法" class="headerlink" title="常用数组方法的基本用法"></a>常用数组方法的基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">//forEach</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明式（不关心如何实现）</span></span><br><span class="line">  <span class="built_in">console</span>.log(item); <span class="comment">//1 2 3 4 5 不支持return</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//1)filter 是否操作原数组： 不 返回结果： 过滤后的新数组 回调函数的返回结果： 如果返回true 表示这一项放到新数组中</span></span><br><span class="line"><span class="keyword">let</span> newAry = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item &gt; <span class="number">2</span> &amp;&amp; item &lt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newAry); <span class="comment">//[3,4]</span></span><br><span class="line"><span class="comment">//2)map 映射 将原有的数组映射成一个新数组 [1,2,3] &lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt; (更新)</span></span><br><span class="line"><span class="comment">// 不操作原数组 返回新数组 回调函数中返回什么这一项就是什么</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>; <span class="comment">// ``是es6中的模板字符串 遇到变量用$&#123;&#125;取值</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//3) reduce 4个参数 返回的是叠加后的结果 原数组不发生变化，回调函数返回的结果：prev代表的是数组的第一项，next是数组的第二项，index是当前索引，item是原数组</span></span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next, index, item</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev, next);</span><br><span class="line">  <span class="keyword">return</span> prev + next; <span class="comment">// 本次的返回值 会作为下一次的prev</span></span><br><span class="line">&#125;, <span class="number">0</span>); <span class="comment">//第二个参数可以初始化第一项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4)some 找true 找到true后停止 返回true 找不到返回false</span></span><br><span class="line"><span class="comment">//5)every 找false 找到false后停止 返回false</span></span><br></pre></td></tr></table></figure><blockquote><p>以上的数组方法都是 es6 中有用并且常用的方法</p></blockquote><h2 id="Vue-js-是什么"><a href="#Vue-js-是什么" class="headerlink" title="Vue.js 是什么"></a>Vue.js 是什么</h2><blockquote><ul><li>请移步官网 <a href="URL" title="https://cn.vuejs.org/v2/guide/">Vue 官网文档</a></li><li>总结就是一个简易上手的<strong>MVVM</strong>框架,还便于与第三方库或既有项目整合。</li></ul></blockquote><a id="more"></a><h2 id="vue-基础语法"><a href="#vue-基础语法" class="headerlink" title="vue 基础语法"></a>vue 基础语法</h2><ul><li><strong>v-model</strong></li></ul><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="class"><span class="keyword">type</span></span>=<span class="string">"text"</span> v-model=<span class="string">"testName"</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      testName: <span class="string">'zhangsan'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>以上就是 vue 的最常用的双向绑定：当你改变 data 中的<strong>testName</strong>时，输入框中的值也会跟着改变。</p></blockquote><h2 id="vue-的基本原理：defineProperty"><a href="#vue-的基本原理：defineProperty" class="headerlink" title="vue 的基本原理：defineProperty"></a>vue 的基本原理：<strong>defineProperty</strong></h2><blockquote><p>其实 vue 就是通过遍历 data 里的属性，通过 object.defineProperty 设置 getter 和 setter。下面实现一个极简单的双向绑定<br>因为 IE9 以下不兼容<code>Object.defineProperty</code>，所以 vue 也同理</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">id</span>=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;input <span class="built_in">id</span>=<span class="string">"txt"</span> /&gt;</span><br><span class="line">  &lt;p <span class="built_in">id</span>=<span class="string">"show-txt"</span>&gt;&lt;/p&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'txt'</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function() &#123;</span><br><span class="line">    <span class="comment">//当获取obj的txt的值得时候会触发该方法</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>: function(newValue) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'txt'</span>).value = newValue;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'show-txt'</span>).innerHtml = newValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听键盘事件</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  obj.txt = e.target.value; <span class="comment">// 当值发生变化的时候会调用set方法</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="v-for-循环"><a href="#v-for-循环" class="headerlink" title="v-for 循环"></a>v-for 循环</h2><blockquote><p>原生 js 如果要实现从后台获取列表数据，并展示，需要一个个拼接，操作繁琐，代码还难看。<br>vue 直接用<code>v-for</code>指令，简洁方便</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--以前：拼字符串innerHTML --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--vue提供了一个指令 v-for 解决循环问题的 更高效 会复用原有的结构 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--要循环谁就在谁的身上增加v-for属性--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!--默认是value in 数组 / (value,index) in 数组--&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- key最好不用索引index，因为操作数组时，索引会改变 --&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(fruit,index) in fruits"</span> <span class="attr">:key</span>=<span class="string">"fruit.name"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;index+1&#125;&#125;</span><span class="xml">.</span><span class="template-variable">&#123;&#123;fruit.name&#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(c,childIndex) in fruit.color"</span> <span class="attr">:key</span>=<span class="string">"childIndex"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="template-variable">&#123;&#123;index+1&#125;&#125;</span><span class="xml">.</span><span class="template-variable">&#123;&#123;childIndex+1&#125;&#125;</span><span class="template-variable">&#123;&#123;c&#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      fruits: [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'香蕉'</span>, <span class="attr">color</span>: [<span class="string">'green'</span>, <span class="string">'yellow'</span>] &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'苹果'</span>, <span class="attr">color</span>: [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'yellow'</span>] &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">'西瓜'</span>, <span class="attr">color</span>: [<span class="string">'pink'</span>] &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><blockquote><p><code>v-on</code>简写为<code>@</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如果不传递参数 则不要写括号会自动传入事件源，如果写括号了要手动传入$event属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"fn($event,1)"</span>&gt;</span>点我啊<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// methods和data中的数据会全部放到vm上，而且名字不能冲突，冲突会报错，methods中的this指向的都是实例</span></span><br><span class="line">    fn(event, a) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(event);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="简易-TODO"><a href="#简易-TODO" class="headerlink" title="简易 TODO"></a>简易 TODO</h2><blockquote><p>有了以上的概念，基本可以写一个简单的 TODOList 了</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"val"</span> @<span class="attr">keyup.enter</span>=<span class="string">"add"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in ary"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;(item)&#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"remove(index)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    add(e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ary.unshift(<span class="keyword">this</span>.val);</span><br><span class="line">      <span class="keyword">this</span>.val = <span class="string">''</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    remove(i) &#123;</span><br><span class="line">      <span class="keyword">this</span>.ary = <span class="keyword">this</span>.ary.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> i !== index);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ary: [],</span><br><span class="line">      val: <span class="string">''</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其实就是对你绑定的<code>data</code>中的数组<code>ary</code>进行数组变异的操作，先把 ary 中的内容循环渲染出来；新增就是对 ary 加多一条数据 <code>unshift</code>或者<code>push</code>；删除则是，根据点击传进来的索引，用过滤<code>filter</code>或者<code>splice</code></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;说 vue 之前先提几个数组变异方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;push()&lt;/li&gt;
&lt;li&gt;pop()&lt;/li&gt;
&lt;li&gt;shift()&lt;/li&gt;
&lt;li&gt;unshift()&lt;/li&gt;
&lt;li&gt;splice()&lt;/li&gt;
&lt;li&gt;sort()&lt;/li&gt;
&lt;li&gt;reverse()&lt;blockquote&gt;
&lt;p&gt;因为如果你这样&lt;code&gt;arr[1].name=&amp;#39;nihao&amp;#39;&lt;/code&gt;这样改变数据，是不会触发 set 方法的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;常用数组方法的基本用法&quot;&gt;&lt;a href=&quot;#常用数组方法的基本用法&quot; class=&quot;headerlink&quot; title=&quot;常用数组方法的基本用法&quot;&gt;&lt;/a&gt;常用数组方法的基本用法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//forEach&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 声明式（不关心如何实现）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(item); &lt;span class=&quot;comment&quot;&gt;//1 2 3 4 5 不支持return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//1)filter 是否操作原数组： 不 返回结果： 过滤后的新数组 回调函数的返回结果： 如果返回true 表示这一项放到新数组中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newAry = arr.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;amp;&amp;amp; item &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newAry); &lt;span class=&quot;comment&quot;&gt;//[3,4]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2)map 映射 将原有的数组映射成一个新数组 [1,2,3] &amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt; (更新)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不操作原数组 返回新数组 回调函数中返回什么这一项就是什么&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; arr1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].map(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&amp;lt;li&amp;gt;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;item&amp;#125;&lt;/span&gt;&amp;lt;/li&amp;gt;`&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// ``是es6中的模板字符串 遇到变量用$&amp;#123;&amp;#125;取值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//3) reduce 4个参数 返回的是叠加后的结果 原数组不发生变化，回调函数返回的结果：prev代表的是数组的第一项，next是数组的第二项，index是当前索引，item是原数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sum = arr.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prev, next, index, item&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(prev, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev + next; &lt;span class=&quot;comment&quot;&gt;// 本次的返回值 会作为下一次的prev&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//第二个参数可以初始化第一项&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//4)some 找true 找到true后停止 返回true 找不到返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//5)every 找false 找到false后停止 返回false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;以上的数组方法都是 es6 中有用并且常用的方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Vue-js-是什么&quot;&gt;&lt;a href=&quot;#Vue-js-是什么&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 是什么&quot;&gt;&lt;/a&gt;Vue.js 是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;请移步官网 &lt;a href=&quot;URL&quot; title=&quot;https://cn.vuejs.org/v2/guide/&quot;&gt;Vue 官网文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;总结就是一个简易上手的&lt;strong&gt;MVVM&lt;/strong&gt;框架,还便于与第三方库或既有项目整合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>VUE基础篇--vuex</title>
    <link href="http://yoursite.com/2020/03/16/VUE%E5%9F%BA%E7%A1%80%E7%AF%87(router%E3%80%81vuex)/"/>
    <id>http://yoursite.com/2020/03/16/VUE%E5%9F%BA%E7%A1%80%E7%AF%87(router%E3%80%81vuex)/</id>
    <published>2020-03-16T01:45:34.792Z</published>
    <updated>2019-09-17T02:36:58.704Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>null和undefined的区别</title>
    <link href="http://yoursite.com/2020/03/16/null%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/03/16/null%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-03-16T01:45:34.774Z</published>
    <updated>2019-08-07T09:34:07.842Z</updated>
    
    <content type="html"><![CDATA[<p>null和undefined都代表没有,但是null是属性存在但是值不存在,undefined是连这个属性都不存在<br>例如：<br>document.parentNode(浏览器天生自带的一个属性:父亲节点的属性) -&gt;null(因为一个页面中的document已经是最顶级元素了,它没有父亲)</p><p>document.parentnode -&gt;undefined(因为没有parentnode属性)</p><h4 id="null-空对象指针-gt-没有具体的值-gt-一般都是我们手动设置初始的值为null-后期的话会给其赋值"><a href="#null-空对象指针-gt-没有具体的值-gt-一般都是我们手动设置初始的值为null-后期的话会给其赋值" class="headerlink" title="null:空对象指针-&gt;没有具体的值 -&gt;一般都是我们手动设置初始的值为null,后期的话会给其赋值"></a>null:空对象指针-&gt;没有具体的值 -&gt;一般都是我们手动设置初始的值为null,后期的话会给其赋值</h4><h4 id="undefined-未定义-gt-连东西都没有-gt-一般都是浏览器默认的值"><a href="#undefined-未定义-gt-连东西都没有-gt-一般都是浏览器默认的值" class="headerlink" title="undefined:未定义-&gt;连东西都没有 -&gt;一般都是浏览器默认的值"></a>undefined:未定义-&gt;连东西都没有 -&gt;一般都是浏览器默认的值</h4><p><code>李连杰的女朋友是null,李连杰的男朋友undefined</code></p><a id="more"></a><p><strong>null:</strong><br>1、我们设定一个变量,后期需要使用,那么前期我们设置默认值为null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer=<span class="literal">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">window</span>.clearTimeout(timer);</span><br><span class="line">     &lt;js code&gt;</span><br><span class="line">     timer=<span class="built_in">window</span>.setTimeout(move,<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  move();</span><br></pre></td></tr></table></figure><p>2、在JS内存释放中，我们想释放一个堆内存，就让其值变为null即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">"你好"</span>&#125;;</span><br><span class="line">   obj=<span class="literal">null</span>;-&gt;刚开始开辟的这个堆内存没有被占用,浏览器会在空闲的时候把它销毁掉</span><br></pre></td></tr></table></figure><p>3、我们通过DOM中提供的属性和方法获取页面中的某一个元素标签，如果当前这个标签不存在，获取的结果是null，而不是undefined</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById("div1") -&gt;如果页面中没有#div1,获取的结果就是null</span><br></pre></td></tr></table></figure><p>4、在正则的exec/字符串的match捕获中,如果当前要捕获的字符串和正则不匹配的话，捕获到的结果为null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\d+?/g</span>;</span><br><span class="line">   <span class="keyword">var</span> str=<span class="string">"nihao"</span>;</span><br><span class="line">   reg.exec(str) -&gt;<span class="literal">null</span></span><br><span class="line">   str.match(reg) -&gt;<span class="literal">null</span></span><br></pre></td></tr></table></figure><p><strong>undefined:</strong><br>1、在JS预解释的时候，只声明未定义，默认的值是undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(num); -&gt;<span class="literal">undefined</span></span><br><span class="line">   <span class="keyword">var</span> num=<span class="number">13</span>;</span><br></pre></td></tr></table></figure><p>2、在一个函数中，如果没有写return,或者return后啥都没返回，默认的返回值是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> res=fn();</span><br><span class="line">   <span class="built_in">console</span>.log(res);-&gt;<span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>3、函数中设置了形参，但是执行的时候如果没有传递参数值，那么形参默认值是</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br><span class="line">   function <span class="function"><span class="keyword">fn</span></span>(a,b,c)&#123;</span><br><span class="line">      a-&gt;<span class="number">10</span></span><br><span class="line">      b-&gt;<span class="number">20</span></span><br><span class="line">      c-&gt;undefined  -&gt;arguments[<span class="number">2</span>]=<span class="number">30</span> : 让形参c的值变为<span class="number">30</span>,因为在非严格模式下我们的arguments和形参存在映射关系，但是在严格模式(<span class="string">"use strict"</span>)中是不存在映射关系，改变的话互不影响;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">fn</span></span>(<span class="number">10</span>,<span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>4、获取一个对象的属性名对应的属性值，如果当前的这个属性名不存在的话，属性值默认是undefined</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;&#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(obj.name);<span class="function"> -&gt;</span><span class="literal">undefined</span></span><br></pre></td></tr></table></figure><p>   -&gt;我们也应用这个道理来检测当前的浏览器是否兼容某一个方法<br>      window.getComputedStyle -&gt;获取当前元素经过浏览器计算过的样式<br>      在谷歌中：我们获取的结果是 function getComputedStyle() { [native code] }<br>      在IE6~8中：我们获取的结果是undefined,因为在这个浏览器中不兼容getComputedStyle</p><pre><code>function getCss(curEle,attr){   var val=null,reg=null;   if(window.getComputedStyle){      //-&gt;兼容      val=window.getComputedStyle(curEle,null)[attr];   }else{      //-&gt;不兼容      if(attr===&quot;opacity&quot;){         val=curEle.currentStyle[&quot;filter&quot;]; -&gt;&apos;alpha(opacity=12.345)&apos;;         reg=/^alpha\(opacity=(\d+(?:\.\d+)?)\)$/;         val=reg.test(val)?reg.exec(val)[1]/100:1;      }else{         val=curEle.currentStyle[attr];      }   }   reg=/^-?\d+(\.\d+)?(px|pt|em|rem)?$/;   return reg.test(val)?parseFloat(val):val;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;null和undefined都代表没有,但是null是属性存在但是值不存在,undefined是连这个属性都不存在&lt;br&gt;例如：&lt;br&gt;document.parentNode(浏览器天生自带的一个属性:父亲节点的属性) -&amp;gt;null(因为一个页面中的document已经是最顶级元素了,它没有父亲)&lt;/p&gt;
&lt;p&gt;document.parentnode -&amp;gt;undefined(因为没有parentnode属性)&lt;/p&gt;
&lt;h4 id=&quot;null-空对象指针-gt-没有具体的值-gt-一般都是我们手动设置初始的值为null-后期的话会给其赋值&quot;&gt;&lt;a href=&quot;#null-空对象指针-gt-没有具体的值-gt-一般都是我们手动设置初始的值为null-后期的话会给其赋值&quot; class=&quot;headerlink&quot; title=&quot;null:空对象指针-&amp;gt;没有具体的值 -&amp;gt;一般都是我们手动设置初始的值为null,后期的话会给其赋值&quot;&gt;&lt;/a&gt;null:空对象指针-&amp;gt;没有具体的值 -&amp;gt;一般都是我们手动设置初始的值为null,后期的话会给其赋值&lt;/h4&gt;&lt;h4 id=&quot;undefined-未定义-gt-连东西都没有-gt-一般都是浏览器默认的值&quot;&gt;&lt;a href=&quot;#undefined-未定义-gt-连东西都没有-gt-一般都是浏览器默认的值&quot; class=&quot;headerlink&quot; title=&quot;undefined:未定义-&amp;gt;连东西都没有 -&amp;gt;一般都是浏览器默认的值&quot;&gt;&lt;/a&gt;undefined:未定义-&amp;gt;连东西都没有 -&amp;gt;一般都是浏览器默认的值&lt;/h4&gt;&lt;p&gt;&lt;code&gt;李连杰的女朋友是null,李连杰的男朋友undefined&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://yoursite.com/2020/03/16/ES6/"/>
    <id>http://yoursite.com/2020/03/16/ES6/</id>
    <published>2020-03-16T01:45:34.747Z</published>
    <updated>2019-10-20T07:52:09.276Z</updated>
    
    <content type="html"><![CDATA[<h3 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h3><ul><li><strong>var</strong><blockquote><p>用var声明会预解释，但是不会赋值<br>由于作用域的问题，会造成作用域污染<br>不能更改常量，如PI</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>let</strong></li></ul><blockquote><p>用let声明的变量会绑定到当前的作用域内，不会声明到window上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//常见的作用域问题，1、var改成let；2、用闭包</span></span><br></pre></td></tr></table></figure><ul><li><strong>const</strong><blockquote><p>定义了就不能改动<br>虽然说常量不能再引用别的对象了，但是它的值如果是一个引用类型的话，引用对象的属性还是可以改的</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> USER = &#123;<span class="attr">name</span>:<span class="string">'ldj'</span>&#125;;</span><br><span class="line">USER.name= <span class="string">'ldj2'</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><blockquote><ul><li>解构就是分解一个对象的结构</li><li>解构的时候，等号的二边结构类似。右边还必须是一个真实的值</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a1, a2, a3] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//数组的key要对应上</span></span><br><span class="line"><span class="comment">//  对象的解构 想更改名字可以采用：的方式</span></span><br><span class="line"><span class="keyword">let</span> &#123; age, <span class="attr">name</span>: n &#125; = &#123; <span class="attr">name</span>: <span class="string">'ldj'</span>, <span class="attr">age</span>: <span class="number">9</span> &#125;;</span><br><span class="line"><span class="comment">// =可以赋默认值 ：用来更改名字的</span></span><br><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">name</span>:<span class="string">'ldj'</span>,<span class="attr">age</span>:<span class="number">9</span>&#125;,<span class="string">'回龙观'</span>,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">&#123;url=new Error(</span>),<span class="title">method</span>='<span class="title">get</span>',<span class="title">data</span>=''&#125;)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(url,method,data)</span><br><span class="line">    <span class="comment">// let url = options.url||  new Error('url没填');</span></span><br><span class="line">    <span class="comment">// let method = options.method || 'get'</span></span><br><span class="line">&#125;</span><br><span class="line">ajax(&#123;</span><br><span class="line">    url:<span class="string">'/ldj'</span>,</span><br><span class="line">    data:&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><blockquote><p>字符串里可以嵌套变量</p></blockquote><p>模板语言的大多数实现原理 就是替换操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'ldj'</span>, age = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">let</span> desc = <span class="string">"$&#123;name&#125; 今年 $&#123;age&#125; 岁了"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">desc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> desc.replace(<span class="regexp">/\$\&#123;([^&#125;]+)\&#125;/g</span>, <span class="function"><span class="keyword">function</span> (<span class="params">matched,key</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(key);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>模板字符串</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> users = [&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">'abc'</span>&#125;,&#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">'zxy'</span>&#125;];</span><br><span class="line"><span class="comment">//期望</span></span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;<span class="number">1</span>:abc&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;li&gt;2:zxy&lt;/</span>li&gt;</span><br><span class="line">  &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/映射，把老数组里的每一个元素映射为新数组的每一个元素</span></span><br><span class="line"><span class="regexp">let newLis = users.map(function(user,index)&#123;</span></span><br><span class="line"><span class="regexp">  return  `&lt;li&gt;$&#123;user.id&#125;:$&#123;user.name&#125;&lt;/</span>li&gt;<span class="string">`;</span></span><br><span class="line"><span class="string">&#125;).join('');</span></span><br><span class="line"><span class="string">let ul = (</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">  $&#123;newLis&#125;</span><br><span class="line">   &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  `</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">console.log(ul);</span></span><br></pre></td></tr></table></figure><blockquote><p>剩余运算符 </p></blockquote><p>会把后面所有参数全都放在一个数组里,只能在函数的最后的参数中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'ldj'</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">9</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">arrs,...args</span>)</span>&#123; <span class="comment">// 函数的剩余运算符,只能在函数的最后的参数中使用</span></span><br><span class="line">    <span class="comment">// arguments是函数内置的</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="comment">/*0: (4) ["名字是:", "年龄是:", ".", "", raw: Array(4)]</span></span><br><span class="line"><span class="comment"> 1: "ldj"</span></span><br><span class="line"><span class="comment"> 2: 9</span></span><br><span class="line"><span class="comment"> 3: 9*/</span></span><br><span class="line">    <span class="built_in">console</span>.log(arrs,args);<span class="comment">//["名字是:", "年龄是:", ".", "", raw: Array(4)] , ["ldj", 9, 9]</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;args.length;i++)&#123;</span><br><span class="line">        str+=(arrs[i]+<span class="string">"("</span>+args[i]+<span class="string">")"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    str+=arrs[arrs.length<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// tag的名字是随便起的</span></span><br><span class="line"><span class="keyword">let</span> newStr = tag<span class="string">`名字是:<span class="subst">$&#123;name&#125;</span>年龄是:<span class="subst">$&#123;age&#125;</span>.<span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newStr);<span class="comment">//名字是:(ldj)年龄是:(9).(9)</span></span><br></pre></td></tr></table></figure><blockquote><p>新增的字符串方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> address1 = <span class="string">'http://www.baidu.com'</span>;</span><br><span class="line"><span class="keyword">let</span> address2 = <span class="string">'ftp://www.baidu.com'</span>;</span><br><span class="line"><span class="keyword">if</span>(address1.startsWith(<span class="string">'http'</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'http网址'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(address2.startsWith(<span class="string">'ftp'</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ftp服务器'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filename = <span class="string">'avatar.jpg'</span>;</span><br><span class="line"><span class="keyword">if</span>(filename.endsWith(<span class="string">'jpg'</span>)||filename.endsWith(<span class="string">'png'</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'是一张图片'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> content = <span class="string">'abc'</span>;</span><br><span class="line"><span class="comment">//判断一个字符串是否包含另一个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(content.includes(<span class="string">'b'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(content.indexOf(<span class="string">'b'</span>)!=<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="string">'xx'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x.repeat(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str5 = <span class="string">'7'</span>;</span><br><span class="line"><span class="comment">//  00abc   abc00</span></span><br><span class="line"><span class="comment">//时钟 时间 7:5  07:05</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"("</span>+str5.padStart(<span class="number">2</span>,<span class="string">'0'</span>)+<span class="string">")"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"("</span>+str5.padEnd(<span class="number">2</span>)+<span class="string">")"</span>);</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><blockquote><p>剩余参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">currency,...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(currency) <span class="comment">// '$'</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// 原参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(args)<span class="comment">//2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="string">'$'</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数的默认参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">url=<span class="string">'/a'</span></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(url);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><blockquote><p>箭头函数</p></blockquote><ul><li>箭头函数没有自己的this,它会使用上层的this</li><li>箭头函数的this是定死的，指向外层的this</li><li>普通函数谁调用，this就是谁<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span> <span class="comment">//指向的是这里的this 外层 obj8没有形成作用域，没有函数</span></span><br><span class="line"><span class="keyword">let</span> obj8 = &#123;</span><br><span class="line">  name:<span class="string">'ldj'</span>,</span><br><span class="line">  getName:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj8.getName();<span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">let</span> obj9 = &#123;</span><br><span class="line">  name:<span class="string">'9'</span>,</span><br><span class="line">  gN:obj8.getName</span><br><span class="line">&#125;</span><br><span class="line">obj9.gN();<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>手写一些常用的数组API：</p><p><code>map reduce reducerRight filter forEach some find findIndex every</code></p></blockquote><p><strong>filter</strong></p><blockquote><p>返回true此元素保留在新数组，返回false则删除</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.filter =<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = fn(<span class="keyword">this</span>[i]);</span><br><span class="line">    flag&amp;&amp;newArr.push(<span class="keyword">this</span>[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item&gt;=<span class="number">60</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><p>*<em>some  *</em></p><blockquote><p>找到true就结束</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.some=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> newArr=[]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line"><span class="keyword">let</span> flag=fn(<span class="keyword">this</span>[i])</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">return</span> flag</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>every</strong></p><blockquote><p>找到false就停止</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.every = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> flag = fn(<span class="keyword">this</span>[i]);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>find</strong></p><blockquote><p>找到该项就返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.find=<span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</span><br><span class="line"><span class="keyword">let</span> flag=fn(<span class="keyword">this</span>[i])</span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>[i]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>把类数组转换成数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//let arr = Array.prototype.slice.call(arguments);</span></span><br><span class="line">  <span class="comment">/*Array.prototype.forEach.call(arguments,function(item)&#123;</span></span><br><span class="line"><span class="comment">    console.log(item);</span></span><br><span class="line"><span class="comment">  &#125;);*/</span></span><br><span class="line">  <span class="comment">//把一个类数组转成数组</span></span><br><span class="line">  <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>);</span><br></pre></td></tr></table></figure><p>###对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">age</span>:<span class="number">1</span>,getFood()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'面包'</span>;</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;</span><br><span class="line">  __proto__:obj1,</span><br><span class="line">  getFood()&#123;</span><br><span class="line">    <span class="comment">//super可以调用父亲的方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'牛奶'</span>+<span class="keyword">super</span>.getFood();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>对象赋值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj1)&#123;</span><br><span class="line">  obj3[key] = obj1[key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj2)&#123;</span><br><span class="line">  obj3[key] = obj2[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.assign</span></span><br><span class="line"><span class="comment"> * 1参数是target 后面都是来源对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Object</span>.assign(obj3,obj1,obj2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.slice</span></span><br><span class="line"><span class="keyword">var</span> arr = [obj,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//以上两个方法都是最外层的地址，更深层的对象都是浅拷贝，用同一个堆内存</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>以上的都是浅拷贝</strong><br><strong>浅拷贝</strong>：浅克隆之所以被称为浅克隆，是因为对象只会被克隆最外部的一层,至于更深层的对象,则依然是通过引用指向同一块堆内存.</p></blockquote><blockquote><p>手写一个深拷贝方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的深拷贝 JSON.parse</span></span><br><span class="line"><span class="keyword">let</span> obj6 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj5))</span><br><span class="line"><span class="comment">//注意：这个方法不能深拷贝函数function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> newObj=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> origin)&#123;</span><br><span class="line"><span class="comment">//or...in 会把 parent 原型链上的属性也遍历到，这样就会把 parent的原型属性赋值给 child 的 实例属性,或者可以通过 hasOwnProperty 来过滤</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> origin[key]===<span class="string">'object'</span>)&#123;</span><br><span class="line">newObj[key]=clone(origin[key])</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">newObj[key]=origin[key]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><blockquote><p>以前JS里类和构造函数是一体的<br>类里可以定义构造函数,当你创建一个类的实例的时候就会调用构造函数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;<span class="comment">//实例的私有属性</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//静态属性是类的属性</span></span><br><span class="line">  <span class="keyword">static</span> hello()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//属于实例的公有属性，也就是相当于原型上的属性</span></span><br><span class="line">  getName()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态属性是属于类的，不需实例就能调用</span></span><br><span class="line">Parent.hello = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;let-amp-const&quot;&gt;&lt;a href=&quot;#let-amp-const&quot; class=&quot;headerlink&quot; title=&quot;let&amp;amp;const&quot;&gt;&lt;/a&gt;let&amp;amp;const&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;var&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;用var声明会预解释，但是不会赋值&lt;br&gt;由于作用域的问题，会造成作用域污染&lt;br&gt;不能更改常量，如PI&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;let&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;用let声明的变量会绑定到当前的作用域内，不会声明到window上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;i&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)(i)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//常见的作用域问题，1、var改成let；2、用闭包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;const&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;定义了就不能改动&lt;br&gt;虽然说常量不能再引用别的对象了，但是它的值如果是一个引用类型的话，引用对象的属性还是可以改的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; USER = &amp;#123;&lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;ldj&#39;&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER.name= &lt;span class=&quot;string&quot;&gt;&#39;ldj2&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
</feed>
